
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005468  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080055f0  080055f0  000155f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800577c  0800577c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800577c  0800577c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800577c  0800577c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000005c8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005d8  200005d8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da8c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032d7  00000000  00000000  0002dacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00030da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00031e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ca8  00000000  00000000  00032cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f00c  00000000  00000000  00056968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfc34  00000000  00000000  00065974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001355a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f14  00000000  00000000  001355f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080055d8 	.word	0x080055d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080055d8 	.word	0x080055d8

080001c8 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80001d2:	f000 fabc 	bl	800074e <CopService>
 80001d6:	e7fc      	b.n	80001d2 <AssertFailure+0xa>

080001d8 <BackDoorInit>:
** \brief     Initializes the backdoor entry option.
** \return    none
**
****************************************************************************************/
void BackDoorInit(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    FileHandleFirmwareUpdateRequest();
  }
#endif
#else
  /* open the backdoor after a reset */
  backdoorOpen = BLT_TRUE;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <BackDoorInit+0x18>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 80001e2:	f000 f82d 	bl	8000240 <BackDoorRestartTimer>
#endif
  /* perform the first check that open/closes the backdoor */
  BackDoorCheck();
 80001e6:	f000 f805 	bl	80001f4 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000002c 	.word	0x2000002c

080001f4 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 80001f8:	f000 fa8c 	bl	8000714 <ComIsConnected>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d015      	beq.n	800022e <BackDoorCheck+0x3a>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <BackDoorCheck+0x40>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b01      	cmp	r3, #1
 8000208:	d112      	bne.n	8000230 <BackDoorCheck+0x3c>
  {
    /* check if the backdoor entry time window elapsed */
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 800020a:	f002 f8f9 	bl	8002400 <TimerGet>
 800020e:	4601      	mov	r1, r0
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <BackDoorCheck+0x44>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <BackDoorCheck+0x48>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4413      	add	r3, r2
 800021a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800021e:	4299      	cmp	r1, r3
 8000220:	d306      	bcc.n	8000230 <BackDoorCheck+0x3c>
    {
      /* close the backdoor */
      backdoorOpen = BLT_FALSE;
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <BackDoorCheck+0x40>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
#endif
      {
        /* no firmware update requests detected, so attempt to start the user program.
         * this function does not return if a valid user program is present.
         */
        CpuStartUserProgram();
 8000228:	f000 fa9e 	bl	8000768 <CpuStartUserProgram>
 800022c:	e000      	b.n	8000230 <BackDoorCheck+0x3c>
    return;
 800022e:	bf00      	nop
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	2000002c 	.word	0x2000002c
 8000238:	20000034 	.word	0x20000034
 800023c:	20000030 	.word	0x20000030

08000240 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <BackDoorRestartTimer+0x1c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d104      	bne.n	8000256 <BackDoorRestartTimer+0x16>
  {
    backdoorOpenTime = TimerGet();
 800024c:	f002 f8d8 	bl	8002400 <TimerGet>
 8000250:	4603      	mov	r3, r0
 8000252:	4a03      	ldr	r2, [pc, #12]	; (8000260 <BackDoorRestartTimer+0x20>)
 8000254:	6013      	str	r3, [r2, #0]
  }
} /*** end of BackDoorRestartTimer ***/
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	2000002c 	.word	0x2000002c
 8000260:	20000030 	.word	0x20000030

08000264 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* initialize the CPU */
  CpuInit();
 8000268:	f000 fa77 	bl	800075a <CpuInit>
  /* initialize the watchdog */
  CopInit();
 800026c:	f000 fa69 	bl	8000742 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8000270:	f002 f81e 	bl	80022b0 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8000274:	f001 fe25 	bl	8001ec2 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8000278:	f000 f9a2 	bl	80005c0 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 800027c:	f7ff ffac 	bl	80001d8 <BackDoorInit>
} /*** end of BootInit ***/
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}

08000284 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* service the watchdog */
  CopService();
 8000288:	f000 fa61 	bl	800074e <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 800028c:	f002 f87e 	bl	800238c <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8000290:	f000 f9a4 	bl	80005dc <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8000294:	f7ff ffae 	bl	80001f4 <BackDoorCheck>
} /*** end of BootTask ***/
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <CanGetSpeedConfig>:
**            otherwise.
**
****************************************************************************************/
static blt_bool CanGetSpeedConfig(blt_int16u baud, blt_int16u *prescaler,
                                  blt_int8u *tseg1, blt_int8u *tseg2)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60b9      	str	r1, [r7, #8]
 80002a4:	607a      	str	r2, [r7, #4]
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	4603      	mov	r3, r0
 80002aa:	81fb      	strh	r3, [r7, #14]
  blt_int8u  cnt;
  blt_int32u canClockFreqkHz;
  LL_RCC_ClocksTypeDef rccClocks;

  /* read clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rccClocks);
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	4618      	mov	r0, r3
 80002b2:	f004 fd99 	bl	8004de8 <LL_RCC_GetSystemClocksFreq>
  /* store CAN peripheral clock speed in kHz */
  canClockFreqkHz = rccClocks.PCLK1_Frequency / 1000u;
 80002b6:	69bb      	ldr	r3, [r7, #24]
 80002b8:	4a31      	ldr	r2, [pc, #196]	; (8000380 <CanGetSpeedConfig+0xe4>)
 80002ba:	fba2 2303 	umull	r2, r3, r2, r3
 80002be:	099b      	lsrs	r3, r3, #6
 80002c0:	623b      	str	r3, [r7, #32]

  /* loop through all possible time quanta configurations to find a match */
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80002c8:	e050      	b.n	800036c <CanGetSpeedConfig+0xd0>
  {
    if ((canClockFreqkHz % (baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1))) == 0)
 80002ca:	89fa      	ldrh	r2, [r7, #14]
 80002cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80002d0:	492c      	ldr	r1, [pc, #176]	; (8000384 <CanGetSpeedConfig+0xe8>)
 80002d2:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80002dc:	4929      	ldr	r1, [pc, #164]	; (8000384 <CanGetSpeedConfig+0xe8>)
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	440b      	add	r3, r1
 80002e2:	785b      	ldrb	r3, [r3, #1]
 80002e4:	4403      	add	r3, r0
 80002e6:	3301      	adds	r3, #1
 80002e8:	fb02 f303 	mul.w	r3, r2, r3
 80002ec:	461a      	mov	r2, r3
 80002ee:	6a3b      	ldr	r3, [r7, #32]
 80002f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80002f4:	fb01 f202 	mul.w	r2, r1, r2
 80002f8:	1a9b      	subs	r3, r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d131      	bne.n	8000362 <CanGetSpeedConfig+0xc6>
    {
      /* compute the prescaler that goes with this TQ configuration */
      *prescaler = canClockFreqkHz/(baud*(canTiming[cnt].tseg1+canTiming[cnt].tseg2+1));
 80002fe:	89fa      	ldrh	r2, [r7, #14]
 8000300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000304:	491f      	ldr	r1, [pc, #124]	; (8000384 <CanGetSpeedConfig+0xe8>)
 8000306:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800030a:	4618      	mov	r0, r3
 800030c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000310:	491c      	ldr	r1, [pc, #112]	; (8000384 <CanGetSpeedConfig+0xe8>)
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	440b      	add	r3, r1
 8000316:	785b      	ldrb	r3, [r3, #1]
 8000318:	4403      	add	r3, r0
 800031a:	3301      	adds	r3, #1
 800031c:	fb02 f303 	mul.w	r3, r2, r3
 8000320:	461a      	mov	r2, r3
 8000322:	6a3b      	ldr	r3, [r7, #32]
 8000324:	fbb3 f3f2 	udiv	r3, r3, r2
 8000328:	b29a      	uxth	r2, r3
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	801a      	strh	r2, [r3, #0]

      /* make sure the prescaler is valid */
      if ((*prescaler > 0) && (*prescaler <= 1024))
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d015      	beq.n	8000362 <CanGetSpeedConfig+0xc6>
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	881b      	ldrh	r3, [r3, #0]
 800033a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800033e:	d810      	bhi.n	8000362 <CanGetSpeedConfig+0xc6>
      {
        /* store the bustiming configuration */
        *tseg1 = canTiming[cnt].tseg1;
 8000340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <CanGetSpeedConfig+0xe8>)
 8000346:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	701a      	strb	r2, [r3, #0]
        *tseg2 = canTiming[cnt].tseg2;
 800034e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000352:	4a0c      	ldr	r2, [pc, #48]	; (8000384 <CanGetSpeedConfig+0xe8>)
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	4413      	add	r3, r2
 8000358:	785a      	ldrb	r2, [r3, #1]
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	701a      	strb	r2, [r3, #0]
        /* found a good bus timing configuration */
        return BLT_TRUE;
 800035e:	2301      	movs	r3, #1
 8000360:	e009      	b.n	8000376 <CanGetSpeedConfig+0xda>
  for (cnt=0; cnt < sizeof(canTiming)/sizeof(canTiming[0]); cnt++)
 8000362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000366:	3301      	adds	r3, #1
 8000368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800036c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000370:	2b11      	cmp	r3, #17
 8000372:	d9aa      	bls.n	80002ca <CanGetSpeedConfig+0x2e>
      }
    }
  }
  /* could not find a good bus timing configuration */
  return BLT_FALSE;
 8000374:	2300      	movs	r3, #0
} /*** end of CanGetSpeedConfig ***/
 8000376:	4618      	mov	r0, r3
 8000378:	3728      	adds	r7, #40	; 0x28
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	10624dd3 	.word	0x10624dd3
 8000384:	08005618 	.word	0x08005618

08000388 <CanInit>:
** \brief     Initializes the CAN controller and synchronizes it to the CAN bus.
** \return    none.
**
****************************************************************************************/
void CanInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08e      	sub	sp, #56	; 0x38
 800038c:	af00      	add	r7, sp, #0
  blt_int16u prescaler = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	857b      	strh	r3, [r7, #42]	; 0x2a
  blt_int8u  tseg1 = 0, tseg2 = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000398:	2300      	movs	r3, #0
 800039a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  CAN_FilterTypeDef filterConfig;
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 800039e:	f240 6367 	movw	r3, #1639	; 0x667
 80003a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* the current implementation supports CAN1 and 2. throw an assertion error in case a
   * different CAN channel is configured.
   */
  ASSERT_CT((BOOT_COM_CAN_CHANNEL_INDEX == 0 || BOOT_COM_CAN_CHANNEL_INDEX == 1));
  /* obtain bittiming configuration information. */
  if (CanGetSpeedConfig(BOOT_COM_CAN_BAUDRATE/1000, &prescaler, &tseg1, &tseg2) == BLT_FALSE)
 80003a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a8:	f107 0229 	add.w	r2, r7, #41	; 0x29
 80003ac:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 80003b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b4:	f7ff ff72 	bl	800029c <CanGetSpeedConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d103      	bne.n	80003c6 <CanInit+0x3e>
     * clock configuration. Verify the following settings in blt_conf.h:
     *   - BOOT_COM_CAN_BAUDRATE
     *   - BOOT_CPU_XTAL_SPEED_KHZ
     *   - BOOT_CPU_SYSTEM_SPEED_KHZ
     */
    ASSERT_RT(BLT_FALSE);
 80003be:	21b5      	movs	r1, #181	; 0xb5
 80003c0:	4834      	ldr	r0, [pc, #208]	; (8000494 <CanInit+0x10c>)
 80003c2:	f7ff ff01 	bl	80001c8 <AssertFailure>
  }

  /* set the CAN controller configuration. */
  canHandle.Instance = CAN_CHANNEL;
 80003c6:	4b34      	ldr	r3, [pc, #208]	; (8000498 <CanInit+0x110>)
 80003c8:	4a34      	ldr	r2, [pc, #208]	; (800049c <CanInit+0x114>)
 80003ca:	601a      	str	r2, [r3, #0]
  canHandle.Init.TimeTriggeredMode = DISABLE;
 80003cc:	4b32      	ldr	r3, [pc, #200]	; (8000498 <CanInit+0x110>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	761a      	strb	r2, [r3, #24]
  canHandle.Init.AutoBusOff = DISABLE;
 80003d2:	4b31      	ldr	r3, [pc, #196]	; (8000498 <CanInit+0x110>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	765a      	strb	r2, [r3, #25]
  canHandle.Init.AutoWakeUp = DISABLE;
 80003d8:	4b2f      	ldr	r3, [pc, #188]	; (8000498 <CanInit+0x110>)
 80003da:	2200      	movs	r2, #0
 80003dc:	769a      	strb	r2, [r3, #26]
  canHandle.Init.AutoRetransmission = ENABLE;
 80003de:	4b2e      	ldr	r3, [pc, #184]	; (8000498 <CanInit+0x110>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	76da      	strb	r2, [r3, #27]
  canHandle.Init.ReceiveFifoLocked = DISABLE;
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <CanInit+0x110>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	771a      	strb	r2, [r3, #28]
  canHandle.Init.TransmitFifoPriority = DISABLE;
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <CanInit+0x110>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	775a      	strb	r2, [r3, #29]
  canHandle.Init.Mode = CAN_MODE_NORMAL;
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <CanInit+0x110>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  canHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <CanInit+0x110>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	60da      	str	r2, [r3, #12]
  canHandle.Init.TimeSeg1 = ((blt_int32u)tseg1 - 1) << CAN_BTR_TS1_Pos;
 80003fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000400:	3b01      	subs	r3, #1
 8000402:	041b      	lsls	r3, r3, #16
 8000404:	4a24      	ldr	r2, [pc, #144]	; (8000498 <CanInit+0x110>)
 8000406:	6113      	str	r3, [r2, #16]
  canHandle.Init.TimeSeg2 = ((blt_int32u)tseg2 - 1) << CAN_BTR_TS2_Pos;
 8000408:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800040c:	3b01      	subs	r3, #1
 800040e:	051b      	lsls	r3, r3, #20
 8000410:	4a21      	ldr	r2, [pc, #132]	; (8000498 <CanInit+0x110>)
 8000412:	6153      	str	r3, [r2, #20]
  canHandle.Init.Prescaler = prescaler;
 8000414:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000416:	461a      	mov	r2, r3
 8000418:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <CanInit+0x110>)
 800041a:	605a      	str	r2, [r3, #4]
  /* initialize the CAN controller. this only fails if the CAN controller hardware is
   * faulty. no need to evaluate the return value as there is nothing we can do about
   * a faulty CAN controller.
   */
  (void)HAL_CAN_Init(&canHandle);
 800041c:	481e      	ldr	r0, [pc, #120]	; (8000498 <CanInit+0x110>)
 800041e:	f002 fcfb 	bl	8002e18 <HAL_CAN_Init>
  /* determine the reception filter mask and id values such that it only leaves one
   * CAN identifier through (BOOT_COM_CAN_RX_MSG_ID).
   */
  if ((rxMsgId & 0x80000000) == 0)
 8000422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000424:	2b00      	cmp	r3, #0
 8000426:	db05      	blt.n	8000434 <CanInit+0xac>
  {
    rxFilterId = rxMsgId << CAN_RI0R_STID_Pos;
 8000428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042a:	055b      	lsls	r3, r3, #21
 800042c:	637b      	str	r3, [r7, #52]	; 0x34
    rxFilterMask = (CAN_RI0R_STID_Msk) | CAN_RI0R_IDE;
 800042e:	4b1c      	ldr	r3, [pc, #112]	; (80004a0 <CanInit+0x118>)
 8000430:	633b      	str	r3, [r7, #48]	; 0x30
 8000432:	e00a      	b.n	800044a <CanInit+0xc2>
  }
  else
  {
    /* negate the ID-type bit */
    rxMsgId &= ~0x80000000;
 8000434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800043a:	62fb      	str	r3, [r7, #44]	; 0x2c
    rxFilterId = (rxMsgId << CAN_RI0R_EXID_Pos) | CAN_RI0R_IDE;
 800043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800043e:	00db      	lsls	r3, r3, #3
 8000440:	f043 0304 	orr.w	r3, r3, #4
 8000444:	637b      	str	r3, [r7, #52]	; 0x34
    rxFilterMask = (CAN_RI0R_EXID_Msk) | CAN_RI0R_IDE;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <CanInit+0x11c>)
 8000448:	633b      	str	r3, [r7, #48]	; 0x30
  /* configure the reception filter. note that the implementation of this function
   * always returns HAL_OK, so no need to evaluate the return value.
   */
#if (BOOT_COM_CAN_CHANNEL_INDEX == 0)
  /* filter 0 is the first filter assigned to the bxCAN master (CAN1) */
  filterConfig.FilterBank = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
#else
  /* filter 14 is the first filter assigned to the bxCAN slave (CAN2) */
  filterConfig.FilterBank = 14;
#endif
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000452:	2301      	movs	r3, #1
 8000454:	61fb      	str	r3, [r7, #28]
  filterConfig.FilterIdHigh = (rxFilterId >> 16) & 0x0000FFFFu;
 8000456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000458:	0c1b      	lsrs	r3, r3, #16
 800045a:	603b      	str	r3, [r7, #0]
  filterConfig.FilterIdLow = rxFilterId & 0x0000FFFFu;
 800045c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800045e:	b29b      	uxth	r3, r3
 8000460:	607b      	str	r3, [r7, #4]
  filterConfig.FilterMaskIdHigh = (rxFilterMask >> 16) & 0x0000FFFFu;
 8000462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000464:	0c1b      	lsrs	r3, r3, #16
 8000466:	60bb      	str	r3, [r7, #8]
  filterConfig.FilterMaskIdLow = rxFilterMask & 0x0000FFFFu;
 8000468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046a:	b29b      	uxth	r3, r3
 800046c:	60fb      	str	r3, [r7, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
  filterConfig.FilterActivation = ENABLE;
 8000472:	2301      	movs	r3, #1
 8000474:	623b      	str	r3, [r7, #32]
  /* select the start slave bank number (for CAN1). this configuration assigns filter
   * banks 0..13 to CAN1 and 14..27 to CAN2.
   */
  filterConfig.SlaveStartFilterBank = 14;
 8000476:	230e      	movs	r3, #14
 8000478:	627b      	str	r3, [r7, #36]	; 0x24
  (void)HAL_CAN_ConfigFilter(&canHandle, &filterConfig);
 800047a:	463b      	mov	r3, r7
 800047c:	4619      	mov	r1, r3
 800047e:	4806      	ldr	r0, [pc, #24]	; (8000498 <CanInit+0x110>)
 8000480:	f002 fdc6 	bl	8003010 <HAL_CAN_ConfigFilter>
  /* start the CAN peripheral. no need to evaluate the return value as there is nothing
   * we can do about a faulty CAN controller. */
  (void)HAL_CAN_Start(&canHandle);
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <CanInit+0x110>)
 8000486:	f002 fea3 	bl	80031d0 <HAL_CAN_Start>
} /*** end of CanInit ***/
 800048a:	bf00      	nop
 800048c:	3738      	adds	r7, #56	; 0x38
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	080055f0 	.word	0x080055f0
 8000498:	20000038 	.word	0x20000038
 800049c:	40006400 	.word	0x40006400
 80004a0:	ffe00004 	.word	0xffe00004
 80004a4:	001ffffc 	.word	0x001ffffc

080004a8 <CanTransmitPacket>:
** \param     len  Number of bytes that are to be transmitted.
** \return    none.
**
****************************************************************************************/
void CanTransmitPacket(blt_int8u *data, blt_int8u len)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
  blt_int32u txMsgId = BOOT_COM_CAN_TX_MSG_ID;
 80004b4:	f240 73e1 	movw	r3, #2017	; 0x7e1
 80004b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  blt_int32u txMsgMailbox;
  blt_int32u timeout;
  HAL_StatusTypeDef txStatus;

  /* configure the message that should be transmitted. */
  if ((txMsgId & 0x80000000) == 0)
 80004ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004bc:	2b00      	cmp	r3, #0
 80004be:	db04      	blt.n	80004ca <CanTransmitPacket+0x22>
  {
    /* set the 11-bit CAN identifier. */
    txMsgHeader.StdId = txMsgId;
 80004c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004c2:	60fb      	str	r3, [r7, #12]
    txMsgHeader.IDE = CAN_ID_STD;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	e007      	b.n	80004da <CanTransmitPacket+0x32>
  }
  else
  {
    /* negate the ID-type bit */
    txMsgId &= ~0x80000000;
 80004ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80004d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* set the 29-bit CAN identifier. */
    txMsgHeader.ExtId = txMsgId;
 80004d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d4:	613b      	str	r3, [r7, #16]
    txMsgHeader.IDE = CAN_ID_EXT;
 80004d6:	2304      	movs	r3, #4
 80004d8:	617b      	str	r3, [r7, #20]
  }
  txMsgHeader.RTR = CAN_RTR_DATA;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  txMsgHeader.DLC = len;
 80004de:	78fb      	ldrb	r3, [r7, #3]
 80004e0:	61fb      	str	r3, [r7, #28]

  /* submit the message for transmission. */
  txStatus = HAL_CAN_AddTxMessage(&canHandle, &txMsgHeader, data,
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	f107 010c 	add.w	r1, r7, #12
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	4812      	ldr	r0, [pc, #72]	; (8000538 <CanTransmitPacket+0x90>)
 80004ee:	f002 feb3 	bl	8003258 <HAL_CAN_AddTxMessage>
 80004f2:	4603      	mov	r3, r0
 80004f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                                  (uint32_t *)&txMsgMailbox);
  if (txStatus == HAL_OK)
 80004f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d117      	bne.n	8000530 <CanTransmitPacket+0x88>
  {
    /* determine timeout time for the transmit completion. */
    timeout = TimerGet() + CAN_MSG_TX_TIMEOUT_MS;
 8000500:	f001 ff7e 	bl	8002400 <TimerGet>
 8000504:	4603      	mov	r3, r0
 8000506:	3332      	adds	r3, #50	; 0x32
 8000508:	627b      	str	r3, [r7, #36]	; 0x24
    /* poll for completion of the transmit operation. */
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 800050a:	e007      	b.n	800051c <CanTransmitPacket+0x74>
    {
      /* service the watchdog. */
      CopService();
 800050c:	f000 f91f 	bl	800074e <CopService>
      /* break loop upon timeout. this would indicate a hardware failure or no other
       * nodes connected to the bus.
       */
      if (TimerGet() > timeout)
 8000510:	f001 ff76 	bl	8002400 <TimerGet>
 8000514:	4602      	mov	r2, r0
 8000516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000518:	4293      	cmp	r3, r2
 800051a:	d308      	bcc.n	800052e <CanTransmitPacket+0x86>
    while (HAL_CAN_IsTxMessagePending(&canHandle, txMsgMailbox) != 0)
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	4619      	mov	r1, r3
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <CanTransmitPacket+0x90>)
 8000522:	f002 ff74 	bl	800340e <HAL_CAN_IsTxMessagePending>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1ef      	bne.n	800050c <CanTransmitPacket+0x64>
      {
        break;
      }
    }
  }
} /*** end of CanTransmitPacket ***/
 800052c:	e000      	b.n	8000530 <CanTransmitPacket+0x88>
        break;
 800052e:	bf00      	nop
} /*** end of CanTransmitPacket ***/
 8000530:	bf00      	nop
 8000532:	3730      	adds	r7, #48	; 0x30
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000038 	.word	0x20000038

0800053c <CanReceivePacket>:
** \param     len Pointer where the length of the packet is to be stored.
** \return    BLT_TRUE is a packet was received, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool CanReceivePacket(blt_int8u *data, blt_int8u *len)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  blt_int32u rxMsgId = BOOT_COM_CAN_RX_MSG_ID;
 8000546:	f240 6367 	movw	r3, #1639	; 0x667
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  blt_bool result = BLT_FALSE;
 800054c:	2300      	movs	r3, #0
 800054e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  CAN_RxHeaderTypeDef rxMsgHeader;

  if (HAL_CAN_GetRxMessage(&canHandle, CAN_RX_FIFO0, &rxMsgHeader, data) == HAL_OK)
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2100      	movs	r1, #0
 800055a:	4818      	ldr	r0, [pc, #96]	; (80005bc <CanReceivePacket+0x80>)
 800055c:	f002 ff7b 	bl	8003456 <HAL_CAN_GetRxMessage>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d11b      	bne.n	800059e <CanReceivePacket+0x62>
  {
    /* check if this message has the configured CAN packet identifier. */
    if ((rxMsgId & 0x80000000) == 0)
 8000566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000568:	2b00      	cmp	r3, #0
 800056a:	db0a      	blt.n	8000582 <CanReceivePacket+0x46>
    {
      /* was an 11-bit CAN message received that matches? */
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000570:	429a      	cmp	r2, r3
 8000572:	d114      	bne.n	800059e <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_STD) )
 8000574:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.StdId == rxMsgId) &&
 8000576:	2b00      	cmp	r3, #0
 8000578:	d111      	bne.n	800059e <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 800057a:	2301      	movs	r3, #1
 800057c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000580:	e00d      	b.n	800059e <CanReceivePacket+0x62>
      }
    }
    else
    {
      /* negate the ID-type bit. */
      rxMsgId &= ~0x80000000;
 8000582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
      /* was an 29-bit CAN message received that matches? */
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800058e:	429a      	cmp	r2, r3
 8000590:	d105      	bne.n	800059e <CanReceivePacket+0x62>
           (rxMsgHeader.IDE == CAN_ID_EXT) )
 8000592:	697b      	ldr	r3, [r7, #20]
      if ( (rxMsgHeader.ExtId == rxMsgId) &&
 8000594:	2b04      	cmp	r3, #4
 8000596:	d102      	bne.n	800059e <CanReceivePacket+0x62>
      {
        /* set flag that a packet with a matching CAN identifier was received. */
        result = BLT_TRUE;
 8000598:	2301      	movs	r3, #1
 800059a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
  /* store the data length. */
  if (result == BLT_TRUE)
 800059e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d103      	bne.n	80005ae <CanReceivePacket+0x72>
  {
    *len = rxMsgHeader.DLC;
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	701a      	strb	r2, [r3, #0]
  }
  /* Give the result back to the caller. */
  return result;
 80005ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
} /*** end of CanReceivePacket ***/
 80005b2:	4618      	mov	r0, r3
 80005b4:	3730      	adds	r7, #48	; 0x30
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000038 	.word	0x20000038

080005c0 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* initialize the XCP communication protocol */
  XcpInit();
 80005c4:	f001 ff2e 	bl	8002424 <XcpInit>
#if (BOOT_COM_CAN_ENABLE > 0)
  /* initialize the CAN controller */
  CanInit();
 80005c8:	f7ff fede 	bl	8000388 <CanInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
 80005cc:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <ComInit+0x18>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  blt_int8u xcpPacketLen;
  /* make xcpCtoReqPacket static for runtime efficiency */
  static blt_int8u xcpCtoReqPacket[BOOT_COM_RX_MAX_DATA];

#if (BOOT_COM_CAN_ENABLE > 0)
  if (CanReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	4619      	mov	r1, r3
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <ComTask+0x30>)
 80005e8:	f7ff ffa8 	bl	800053c <CanReceivePacket>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d107      	bne.n	8000602 <ComTask+0x26>
  {
    /* make this the active interface */
    comActiveInterface = COM_IF_CAN;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <ComTask+0x34>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	701a      	strb	r2, [r3, #0]
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	4619      	mov	r1, r3
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <ComTask+0x30>)
 80005fe:	f001 ff53 	bl	80024a8 <XcpPacketReceived>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000060 	.word	0x20000060
 8000610:	20000000 	.word	0x20000000

08000614 <ComFree>:
** \brief     Releases the communication module.
** \return    none
**
****************************************************************************************/
void ComFree(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
#if (BOOT_COM_CAN_ENABLE > 0)
  /* transmit the packet. note that len is limited to 8 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_CAN)
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <ComTransmitPacket+0x2c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d105      	bne.n	8000644 <ComTransmitPacket+0x20>
  {
    CanTransmitPacket(data, (blt_int8u)len);
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff32 	bl	80004a8 <CanTransmitPacket>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8000644:	f001 ff22 	bl	800248c <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000000 	.word	0x20000000

08000654 <ComGetActiveInterfaceMaxRxLen>:
**            communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <ComGetActiveInterfaceMaxRxLen+0x5c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b04      	cmp	r3, #4
 8000660:	d81b      	bhi.n	800069a <ComGetActiveInterfaceMaxRxLen+0x46>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <ComGetActiveInterfaceMaxRxLen+0x14>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	0800067d 	.word	0x0800067d
 800066c:	08000683 	.word	0x08000683
 8000670:	08000689 	.word	0x08000689
 8000674:	0800068f 	.word	0x0800068f
 8000678:	08000695 	.word	0x08000695
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 800067c:	2381      	movs	r3, #129	; 0x81
 800067e:	80fb      	strh	r3, [r7, #6]
      break;
 8000680:	e00e      	b.n	80006a0 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_MBRTU:
      result = BOOT_COM_MBRTU_RX_MAX_DATA;
 8000682:	2300      	movs	r3, #0
 8000684:	80fb      	strh	r3, [r7, #6]
      break;
 8000686:	e00b      	b.n	80006a0 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8000688:	2308      	movs	r3, #8
 800068a:	80fb      	strh	r3, [r7, #6]
      break;
 800068c:	e008      	b.n	80006a0 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 800068e:	233f      	movs	r3, #63	; 0x3f
 8000690:	80fb      	strh	r3, [r7, #6]
      break;
 8000692:	e005      	b.n	80006a0 <ComGetActiveInterfaceMaxRxLen+0x4c>

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 8000694:	2381      	movs	r3, #129	; 0x81
 8000696:	80fb      	strh	r3, [r7, #6]
      break;
 8000698:	e002      	b.n	80006a0 <ComGetActiveInterfaceMaxRxLen+0x4c>

    default:
      result = BOOT_COM_RX_MAX_DATA;
 800069a:	2381      	movs	r3, #129	; 0x81
 800069c:	80fb      	strh	r3, [r7, #6]
      break;
 800069e:	bf00      	nop
  }

  return result;
 80006a0:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000000 	.word	0x20000000

080006b4 <ComGetActiveInterfaceMaxTxLen>:
**            specified communication interface.
** \return    Maximum number of bytes that can be received.
**
****************************************************************************************/
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <ComGetActiveInterfaceMaxTxLen+0x5c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d81b      	bhi.n	80006fa <ComGetActiveInterfaceMaxTxLen+0x46>
 80006c2:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <ComGetActiveInterfaceMaxTxLen+0x14>)
 80006c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c8:	080006dd 	.word	0x080006dd
 80006cc:	080006e3 	.word	0x080006e3
 80006d0:	080006e9 	.word	0x080006e9
 80006d4:	080006ef 	.word	0x080006ef
 80006d8:	080006f5 	.word	0x080006f5
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 80006dc:	2381      	movs	r3, #129	; 0x81
 80006de:	80fb      	strh	r3, [r7, #6]
      break;
 80006e0:	e00e      	b.n	8000700 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_MBRTU:
      result = BOOT_COM_MBRTU_TX_MAX_DATA;
 80006e2:	2300      	movs	r3, #0
 80006e4:	80fb      	strh	r3, [r7, #6]
      break;
 80006e6:	e00b      	b.n	8000700 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
 80006e8:	2308      	movs	r3, #8
 80006ea:	80fb      	strh	r3, [r7, #6]
      break;
 80006ec:	e008      	b.n	8000700 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 80006ee:	233f      	movs	r3, #63	; 0x3f
 80006f0:	80fb      	strh	r3, [r7, #6]
      break;
 80006f2:	e005      	b.n	8000700 <ComGetActiveInterfaceMaxTxLen+0x4c>

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 80006f4:	2381      	movs	r3, #129	; 0x81
 80006f6:	80fb      	strh	r3, [r7, #6]
      break;
 80006f8:	e002      	b.n	8000700 <ComGetActiveInterfaceMaxTxLen+0x4c>

    default:
      result = BOOT_COM_TX_MAX_DATA;
 80006fa:	2381      	movs	r3, #129	; 0x81
 80006fc:	80fb      	strh	r3, [r7, #6]
      break;
 80006fe:	bf00      	nop
  }

  return result;
 8000700:	88fb      	ldrh	r3, [r7, #6]
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000000 	.word	0x20000000

08000714 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  blt_bool result = BLT_FALSE;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 800071e:	f001 fea3 	bl	8002468 <XcpIsConnected>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <ComIsConnected+0x18>
  {
    result = BLT_TRUE;
 8000728:	2301      	movs	r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
  {
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
 800072c:	79fb      	ldrb	r3, [r7, #7]
} /*** end of ComIsConnected ***/
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <ComDeferredInit>:
**            a request.
** \return    none
**
****************************************************************************************/
void ComDeferredInit(void)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
  /* the default internal timed backdoor mechanism should start its timer after the
   * communication interfaces are initialized. since a deferred initialization was now
   * performed, the backdoor timer should be restarted.
   */
  BackDoorRestartTimer();
 800073a:	f7ff fd81 	bl	8000240 <BackDoorRestartTimer>
#endif
} /*** end of ComDeferredInit ***/
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}

08000742 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8000746:	f000 fbc9 	bl	8000edc <CopInitHook>
#endif
} /*** end of CopInit ***/
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8000752:	f000 fbca 	bl	8000eea <CopServiceHook>
#endif
} /*** end of CopService ***/
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}

0800075a <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 800075e:	f000 f84f 	bl	8000800 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 800076e:	f001 fbcc 	bl	8001f0a <NvmVerifyChecksum>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <CpuStartUserProgram+0x16>
    /* bootloader will stay active so perform deferred initialization to make sure
     * the communication interface that were not yet initialized are now initialized.
     * this is needed to make sure firmware updates via these communication interfaces
     * will be possible.
     */
    ComDeferredInit();
 8000778:	f7ff ffdd 	bl	8000736 <ComDeferredInit>
#endif
    /* not a valid user program so it cannot be started */
    return;
 800077c:	e01a      	b.n	80007b4 <CpuStartUserProgram+0x4c>
    return;
  }
#endif
#if (BOOT_COM_ENABLE > 0)
  /* release the communication interface */
  ComFree();
 800077e:	f7ff ff49 	bl	8000614 <ComFree>
#endif
  /* reset the HAL */
  HAL_DeInit();
 8000782:	f002 fad1 	bl	8002d28 <HAL_DeInit>
  /* reset the timer */
  TimerReset();
 8000786:	f001 fde1 	bl	800234c <TimerReset>
  /* remap user program's vector table */
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 800078a:	f001 fbc5 	bl	8001f18 <NvmGetUserProgBaseAddress>
 800078e:	4603      	mov	r3, r0
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <CpuStartUserProgram+0x54>)
 8000792:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000796:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800079a:	6093      	str	r3, [r2, #8]
  /* set the address where the bootloader needs to jump to. this is the address of
   * the 2nd entry in the user program's vector table. this address points to the
   * user program's reset handler.
   */
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 800079c:	f001 fbbc 	bl	8001f18 <NvmGetUserProgBaseAddress>
 80007a0:	4603      	mov	r3, r0
 80007a2:	3304      	adds	r3, #4
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	607b      	str	r3, [r7, #4]
  /* The Cortex-M4 core has interrupts enabled out of reset. the bootloader
   * explicitly disables these for security reasons. Enable them here again, so it does 
   * not have to be done by the user program.
   */
  CpuIrqEnable();
 80007a8:	f000 f832 	bl	8000810 <CpuIrqEnable>
  /* start the user program by activating its reset interrupt service routine */
  pProgResetHandler();
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4798      	blx	r3
  /* theoretically, the code never gets here because the user program should now be
   * running and the previous function call should not return. In case it did return
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
 80007b0:	f7ff ffc1 	bl	8000736 <ComDeferredInit>
#endif
} /*** end of CpuStartUserProgram ***/
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	4613      	mov	r3, r2
 80007cc:	80fb      	strh	r3, [r7, #6]
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	617b      	str	r3, [r7, #20]
  to = (blt_int8u *)dest;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	613b      	str	r3, [r7, #16]

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80007d6:	e009      	b.n	80007ec <CpuMemCopy+0x2c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	1c53      	adds	r3, r2, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	1c59      	adds	r1, r3, #1
 80007e2:	6139      	str	r1, [r7, #16]
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	701a      	strb	r2, [r3, #0]
    /* keep the watchdog happy */
    CopService();
 80007e8:	f7ff ffb1 	bl	800074e <CopService>
  while (len-- > 0)
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	80fa      	strh	r2, [r7, #6]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f0      	bne.n	80007d8 <CpuMemCopy+0x18>
  }
} /*** end of CpuMemCopy ***/
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <CpuIrqDisable>:
** \brief     Disable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  __asm volatile ("cpsid i");
 8000804:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <CpuIrqEnable>:
** \brief     Enable global interrupts.
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  __asm volatile ("cpsie i");
 8000814:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <FlashInit>:
** \brief     Initializes the flash driver.
** \return    none.
**
****************************************************************************************/
void FlashInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* init the flash block info structs by setting the address to an invalid address */
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <FlashInit+0x20>)
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	601a      	str	r2, [r3, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <FlashInit+0x24>)
 800082e:	f04f 32ff 	mov.w	r2, #4294967295
 8000832:	601a      	str	r2, [r3, #0]
} /*** end of FlashInit ***/
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	200000e4 	.word	0x200000e4
 8000844:	200002e8 	.word	0x200002e8

08000848 <FlashWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  blt_addr base_addr;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	1e5a      	subs	r2, r3, #1
 8000858:	491c      	ldr	r1, [pc, #112]	; (80008cc <FlashWrite+0x84>)
 800085a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800085e:	4419      	add	r1, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	1acb      	subs	r3, r1, r3
 8000864:	3b01      	subs	r3, #1
 8000866:	429a      	cmp	r2, r3
 8000868:	d901      	bls.n	800086e <FlashWrite+0x26>
  {
    return BLT_FALSE;
 800086a:	2300      	movs	r3, #0
 800086c:	e02a      	b.n	80008c4 <FlashWrite+0x7c>
  }
  
  /* make sure the addresses are within the flash device */
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f000 faf0 	bl	8000e54 <FlashGetSector>
 8000874:	4603      	mov	r3, r0
 8000876:	2bff      	cmp	r3, #255	; 0xff
 8000878:	d009      	beq.n	800088e <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	3b01      	subs	r3, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fae6 	bl	8000e54 <FlashGetSector>
 8000888:	4603      	mov	r3, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 800088a:	2bff      	cmp	r3, #255	; 0xff
 800088c:	d101      	bne.n	8000892 <FlashWrite+0x4a>
  {
    return BLT_FALSE;
 800088e:	2300      	movs	r3, #0
 8000890:	e018      	b.n	80008c4 <FlashWrite+0x7c>
  }

  /* if this is the bootblock, then let the boot block manager handle it */
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000898:	f023 0301 	bic.w	r3, r3, #1
 800089c:	617b      	str	r3, [r7, #20]
  if (base_addr == flashLayout[0].sector_start)
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <FlashWrite+0x88>)
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d107      	bne.n	80008b6 <FlashWrite+0x6e>
  {
    /* let the boot block manager handle it */
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	68f9      	ldr	r1, [r7, #12]
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <FlashWrite+0x8c>)
 80008ae:	f000 f967 	bl	8000b80 <FlashAddToBlock>
 80008b2:	4603      	mov	r3, r0
 80008b4:	e006      	b.n	80008c4 <FlashWrite+0x7c>
  }
  /* let the block manager handle it */
  return FlashAddToBlock(&blockInfo, addr, data, len);
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	68f9      	ldr	r1, [r7, #12]
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <FlashWrite+0x90>)
 80008be:	f000 f95f 	bl	8000b80 <FlashAddToBlock>
 80008c2:	4603      	mov	r3, r0
} /*** end of FlashWrite ***/
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	081e0000 	.word	0x081e0000
 80008d0:	08008000 	.word	0x08008000
 80008d4:	200002e8 	.word	0x200002e8
 80008d8:	200000e4 	.word	0x200000e4

080008dc <FlashErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashErase(blt_addr addr, blt_int32u len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  blt_int8u first_sector;
  blt_int8u last_sector;

  /* validate the len parameter */
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	4916      	ldr	r1, [pc, #88]	; (8000944 <FlashErase+0x68>)
 80008ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008f0:	4419      	add	r1, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	1acb      	subs	r3, r1, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d901      	bls.n	8000900 <FlashErase+0x24>
  {
    return BLT_FALSE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	e01c      	b.n	800093a <FlashErase+0x5e>
  }
  
  /* obtain the first and last sector number */
  first_sector = FlashGetSector(addr);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 faa7 	bl	8000e54 <FlashGetSector>
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]
  last_sector  = FlashGetSector(addr+len-1);
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	3b01      	subs	r3, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fa9e 	bl	8000e54 <FlashGetSector>
 8000918:	4603      	mov	r3, r0
 800091a:	73bb      	strb	r3, [r7, #14]
  /* check them */
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	2bff      	cmp	r3, #255	; 0xff
 8000920:	d002      	beq.n	8000928 <FlashErase+0x4c>
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	2bff      	cmp	r3, #255	; 0xff
 8000926:	d101      	bne.n	800092c <FlashErase+0x50>
  {
    return BLT_FALSE;
 8000928:	2300      	movs	r3, #0
 800092a:	e006      	b.n	800093a <FlashErase+0x5e>
  }
  /* erase the sectors */
  return FlashEraseSectors(first_sector, last_sector);
 800092c:	7bba      	ldrb	r2, [r7, #14]
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fa30 	bl	8000d98 <FlashEraseSectors>
 8000938:	4603      	mov	r3, r0
} /*** end of FlashErase ***/
 800093a:	4618      	mov	r0, r3
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	081e0000 	.word	0x081e0000

08000948 <FlashWriteChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashWriteChecksum(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]

  /* first check that the bootblock contains valid data. if not, this means the
   * bootblock is not part of the reprogramming this time and therefore no
   * new checksum needs to be written
   */
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <FlashWriteChecksum+0x84>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095a:	d101      	bne.n	8000960 <FlashWriteChecksum+0x18>
  {
    return BLT_TRUE;
 800095c:	2301      	movs	r3, #1
 800095e:	e031      	b.n	80009c4 <FlashWriteChecksum+0x7c>
#endif

  /* compute the checksum. note that the user program's vectors are not yet written
   * to flash but are present in the bootblock data structure at this point.
   */
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <FlashWriteChecksum+0x88>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <FlashWriteChecksum+0x8c>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <FlashWriteChecksum+0x90>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <FlashWriteChecksum+0x94>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <FlashWriteChecksum+0x98>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <FlashWriteChecksum+0x9c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <FlashWriteChecksum+0xa0>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	607b      	str	r3, [r7, #4]
  signature_checksum  = ~signature_checksum; /* one's complement */
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	43db      	mvns	r3, r3
 80009aa:	607b      	str	r3, [r7, #4]
  signature_checksum += 1; /* two's complement */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3301      	adds	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]

  /* write the checksum */
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <FlashWriteChecksum+0xa4>)
 80009b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80009b8:	1d3a      	adds	r2, r7, #4
 80009ba:	2104      	movs	r1, #4
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff43 	bl	8000848 <FlashWrite>
 80009c2:	4603      	mov	r3, r0
                    sizeof(blt_addr), (blt_int8u *)&signature_checksum);
} /*** end of FlashWriteChecksum ***/
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200002e8 	.word	0x200002e8
 80009d0:	200002ec 	.word	0x200002ec
 80009d4:	200002f0 	.word	0x200002f0
 80009d8:	200002f4 	.word	0x200002f4
 80009dc:	200002f8 	.word	0x200002f8
 80009e0:	200002fc 	.word	0x200002fc
 80009e4:	20000300 	.word	0x20000300
 80009e8:	20000304 	.word	0x20000304
 80009ec:	08008000 	.word	0x08008000

080009f0 <FlashVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashVerifyChecksum(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  blt_int32u signature_checksum = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]

  /* verify the checksum based on how it was written by CpuWriteChecksum() */
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <FlashVerifyChecksum+0x84>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <FlashVerifyChecksum+0x84>)
 8000a06:	3304      	adds	r3, #4
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <FlashVerifyChecksum+0x84>)
 8000a12:	3308      	adds	r3, #8
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <FlashVerifyChecksum+0x84>)
 8000a1e:	330c      	adds	r3, #12
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <FlashVerifyChecksum+0x84>)
 8000a2a:	3310      	adds	r3, #16
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <FlashVerifyChecksum+0x84>)
 8000a36:	3314      	adds	r3, #20
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <FlashVerifyChecksum+0x84>)
 8000a42:	3318      	adds	r3, #24
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <FlashVerifyChecksum+0x84>)
 8000a4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	607b      	str	r3, [r7, #4]
  /* sum should add up to an unsigned 32-bit value of 0 */
  if (signature_checksum == 0)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d101      	bne.n	8000a64 <FlashVerifyChecksum+0x74>
  {
    /* checksum okay */
    return BLT_TRUE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <FlashVerifyChecksum+0x76>
  }
  /* checksum incorrect */
  return BLT_FALSE;
 8000a64:	2300      	movs	r3, #0
} /*** end of FlashVerifyChecksum ***/
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	08008000 	.word	0x08008000

08000a78 <FlashDone>:
**            the currently active block that needs to be flashed.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FlashDone(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* check if there is still data waiting to be programmed in the boot block */
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <FlashDone+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a84:	d007      	beq.n	8000a96 <FlashDone+0x1e>
  {
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8000a86:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <FlashDone+0x40>)
 8000a88:	f000 f8dc 	bl	8000c44 <FlashWriteBlock>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <FlashDone+0x1e>
    {
      return BLT_FALSE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e00d      	b.n	8000ab2 <FlashDone+0x3a>
    }
  }

  /* check if there is still data waiting to be programmed */
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <FlashDone+0x44>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a9e:	d007      	beq.n	8000ab0 <FlashDone+0x38>
  {
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <FlashDone+0x44>)
 8000aa2:	f000 f8cf 	bl	8000c44 <FlashWriteBlock>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <FlashDone+0x38>
    {
      return BLT_FALSE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	e000      	b.n	8000ab2 <FlashDone+0x3a>
    }
  }
  /* still here so all is okay */
  return BLT_TRUE;
 8000ab0:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200002e8 	.word	0x200002e8
 8000abc:	200000e4 	.word	0x200000e4

08000ac0 <FlashGetUserProgBaseAddress>:
**            This is basically the first address in the flashLayout table.
** \return    Base address.
**
****************************************************************************************/
blt_addr FlashGetUserProgBaseAddress(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return flashLayout[0].sector_start;
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <FlashGetUserProgBaseAddress+0x10>)
} /*** end of FlashGetUserProgBaseAddress ***/
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	08008000 	.word	0x08008000

08000ad4 <FlashInitBlock>:
** \param     address Base address of the block data.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashInitBlock(tFlashBlockInfo *block, blt_addr address)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  /* check address alignment */
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <FlashInitBlock+0x18>
  {
    return BLT_FALSE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e012      	b.n	8000b12 <FlashInitBlock+0x3e>
  }
  /* make sure that we are initializing a new block and not the same one */
  if (block->base_addr == address)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d101      	bne.n	8000afa <FlashInitBlock+0x26>
  {
    /* block already initialized, so nothing to do */
    return BLT_TRUE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00b      	b.n	8000b12 <FlashInitBlock+0x3e>
  }
  /* set the base address and copies the current data from flash */
  block->base_addr = address;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	601a      	str	r2, [r3, #0]
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3304      	adds	r3, #4
 8000b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fe58 	bl	80007c0 <CpuMemCopy>
  return BLT_TRUE;
 8000b10:	2301      	movs	r3, #1
} /*** end of FlashInitBlock ***/
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <FlashSwitchBlock>:
** \return    The pointer of the block info struct that is no being used, or a NULL
**            pointer in case of error.
**
****************************************************************************************/
static tFlashBlockInfo *FlashSwitchBlock(tFlashBlockInfo *block, blt_addr base_addr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  /* check if a switch needs to be made away from the boot block. in this case the boot
   * block shouldn't be written yet, because this is done at the end of the programming
   * session by FlashDone(), this is right after the checksum was written.
   */
  if (block == &bootBlockInfo)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <FlashSwitchBlock+0x58>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d102      	bne.n	8000b34 <FlashSwitchBlock+0x18>
  {
    /* switch from the boot block to the generic block info structure */
    block = &blockInfo;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <FlashSwitchBlock+0x5c>)
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	e010      	b.n	8000b56 <FlashSwitchBlock+0x3a>
  }
  /* check if a switch back into the bootblock is needed. in this case the generic block
   * doesn't need to be written here yet.
   */
  else if (base_addr == flashLayout[0].sector_start)
 8000b34:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <FlashSwitchBlock+0x60>)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d104      	bne.n	8000b46 <FlashSwitchBlock+0x2a>
  {
    /* switch from the generic block to the boot block info structure */
    block = &bootBlockInfo;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <FlashSwitchBlock+0x58>)
 8000b3e:	607b      	str	r3, [r7, #4]
    base_addr = flashLayout[0].sector_start;
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <FlashSwitchBlock+0x60>)
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	e007      	b.n	8000b56 <FlashSwitchBlock+0x3a>
  }
  else
  {
    /* need to switch to a new block, so program the current one and init the next */
    if (FlashWriteBlock(block) == BLT_FALSE)
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 f87c 	bl	8000c44 <FlashWriteBlock>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <FlashSwitchBlock+0x3a>
    {
      return BLT_NULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e009      	b.n	8000b6a <FlashSwitchBlock+0x4e>
    }
  }

  /* initialize tne new block when necessary */
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8000b56:	6839      	ldr	r1, [r7, #0]
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffbb 	bl	8000ad4 <FlashInitBlock>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <FlashSwitchBlock+0x4c>
  {
    return BLT_NULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e000      	b.n	8000b6a <FlashSwitchBlock+0x4e>
  }

  /* still here to all is okay  */
  return block;
 8000b68:	687b      	ldr	r3, [r7, #4]
} /*** end of FlashSwitchBlock ***/
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200002e8 	.word	0x200002e8
 8000b78:	200000e4 	.word	0x200000e4
 8000b7c:	08008000 	.word	0x08008000

08000b80 <FlashAddToBlock>:
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashAddToBlock(tFlashBlockInfo *block, blt_addr address,
                                blt_int8u *data, blt_int32u len)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  blt_addr   current_base_addr;
  blt_int8u  *dst;
  blt_int8u  *src;

  /* determine the current base address */
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000b94:	f023 0301 	bic.w	r3, r3, #1
 8000b98:	617b      	str	r3, [r7, #20]

  /* make sure the blockInfo is not uninitialized */
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba2:	d108      	bne.n	8000bb6 <FlashAddToBlock+0x36>
  {
    /* initialize the blockInfo struct for the current block */
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8000ba4:	6979      	ldr	r1, [r7, #20]
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f7ff ff94 	bl	8000ad4 <FlashInitBlock>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <FlashAddToBlock+0x36>
    {
      return BLT_FALSE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e042      	b.n	8000c3c <FlashAddToBlock+0xbc>
    }
  }

  /* check if the new data fits in the current block */
  if (block->base_addr != current_base_addr)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d009      	beq.n	8000bd4 <FlashAddToBlock+0x54>
  {
    /* need to switch to a new block, so program the current one and init the next */
    block = FlashSwitchBlock(block, current_base_addr);
 8000bc0:	6979      	ldr	r1, [r7, #20]
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff ffaa 	bl	8000b1c <FlashSwitchBlock>
 8000bc8:	60f8      	str	r0, [r7, #12]
    if (block == BLT_NULL)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <FlashAddToBlock+0x54>
    {
      return BLT_FALSE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e033      	b.n	8000c3c <FlashAddToBlock+0xbc>
    }
  }

  /* add the data to the current block, but check for block overflow */
  dst = &(block->data[address - block->base_addr]);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	3304      	adds	r3, #4
 8000be2:	61fb      	str	r3, [r7, #28]
  src = data;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	61bb      	str	r3, [r7, #24]
  do
  {
    /* keep the watchdog happy */
    CopService();
 8000be8:	f7ff fdb1 	bl	800074e <CopService>
    /* buffer overflow? */
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf8:	d30f      	bcc.n	8000c1a <FlashAddToBlock+0x9a>
    {
      /* need to switch to a new block, so program the current one and init the next */
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c00:	4619      	mov	r1, r3
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f7ff ff8a 	bl	8000b1c <FlashSwitchBlock>
 8000c08:	60f8      	str	r0, [r7, #12]
      if (block == BLT_NULL)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <FlashAddToBlock+0x94>
      {
        return BLT_FALSE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e013      	b.n	8000c3c <FlashAddToBlock+0xbc>
      }
      /* reset destination pointer */
      dst = &(block->data[0]);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3304      	adds	r3, #4
 8000c18:	61fb      	str	r3, [r7, #28]
    }
    /* write the data to the buffer */
    *dst = *src;
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	701a      	strb	r2, [r3, #0]
    /* update pointers */
    dst++;
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3301      	adds	r3, #1
 8000c26:	61fb      	str	r3, [r7, #28]
    src++;
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
    /* decrement byte counter */
    len--;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	603b      	str	r3, [r7, #0]
  }
  while (len > 0);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1d6      	bne.n	8000be8 <FlashAddToBlock+0x68>
  /* still here so all is good */
  return BLT_TRUE;
 8000c3a:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <FlashWriteBlock>:
** \param     block   Pointer to flash block info structure to operate on.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashWriteBlock(tFlashBlockInfo *block)
{
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  blt_addr   prog_addr;
  blt_int32u prog_data;
  blt_int32u word_cnt;
  blt_bool   result = BLT_TRUE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	74fb      	strb	r3, [r7, #19]
    }
  }
#endif

  /* unlock the flash peripheral to enable the flash control register access. */
  HAL_FLASH_Unlock();
 8000c50:	f003 f8b2 	bl	8003db8 <HAL_FLASH_Unlock>

  /* program all words in the block one by one */
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e029      	b.n	8000cae <FlashWriteBlock+0x6a>
  {
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3304      	adds	r3, #4
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	60bb      	str	r3, [r7, #8]
    /* keep the watchdog happy */
    CopService();
 8000c74:	f7ff fd6b 	bl	800074e <CopService>
    /* program the word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	461c      	mov	r4, r3
 8000c7e:	4615      	mov	r5, r2
 8000c80:	4622      	mov	r2, r4
 8000c82:	462b      	mov	r3, r5
 8000c84:	68f9      	ldr	r1, [r7, #12]
 8000c86:	2002      	movs	r0, #2
 8000c88:	f003 f842 	bl	8003d10 <HAL_FLASH_Program>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d002      	beq.n	8000c98 <FlashWriteBlock+0x54>
    {
      result = BLT_FALSE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	74fb      	strb	r3, [r7, #19]
      break;
 8000c96:	e00d      	b.n	8000cb4 <FlashWriteBlock+0x70>
    }
    /* verify that the written data is actually there */
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68ba      	ldr	r2, [r7, #8]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d002      	beq.n	8000ca8 <FlashWriteBlock+0x64>
    {
      result = BLT_FALSE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	74fb      	strb	r3, [r7, #19]
      break;
 8000ca6:	e005      	b.n	8000cb4 <FlashWriteBlock+0x70>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cb2:	d9d2      	bls.n	8000c5a <FlashWriteBlock+0x16>
    }
  }

  /* lock the flash peripheral to disable the flash control register access. */
  HAL_FLASH_Lock();
 8000cb4:	f003 f8a2 	bl	8003dfc <HAL_FLASH_Lock>

  /* Give the result back to the caller. */
  return result;
 8000cb8:	7cfb      	ldrb	r3, [r7, #19]
} /*** end of FlashWriteBlock ***/
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000cc4 <FlashEmptyCheckSector>:
**            flashLayout array, not an index into the array.
** \return    BLT_TRUE if the flash sector is already erased, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEmptyCheckSector(blt_int8u sector_num)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  blt_bool   result = BLT_FALSE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	77fb      	strb	r3, [r7, #31]
  blt_int8u  sectorIdx;
  blt_int32u wordCnt;
  blt_int32u volatile const * wordPtr;
  
  /* find the index of this sector into the flashLayout array */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	77bb      	strb	r3, [r7, #30]
 8000cd6:	e052      	b.n	8000d7e <FlashEmptyCheckSector+0xba>
  {
    /* is this the index that the sector number belongs to? */
    if (flashLayout[sectorIdx].sector_num == sector_num)
 8000cd8:	7fba      	ldrb	r2, [r7, #30]
 8000cda:	492d      	ldr	r1, [pc, #180]	; (8000d90 <FlashEmptyCheckSector+0xcc>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	79fa      	ldrb	r2, [r7, #7]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d143      	bne.n	8000d78 <FlashEmptyCheckSector+0xb4>
    {
      /* retrieve sector info */
      sectorAddr = flashLayout[sectorIdx].sector_start;
 8000cf0:	7fba      	ldrb	r2, [r7, #30]
 8000cf2:	4927      	ldr	r1, [pc, #156]	; (8000d90 <FlashEmptyCheckSector+0xcc>)
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	613b      	str	r3, [r7, #16]
      sectorSize = flashLayout[sectorIdx].sector_size;
 8000d02:	7fba      	ldrb	r2, [r7, #30]
 8000d04:	4922      	ldr	r1, [pc, #136]	; (8000d90 <FlashEmptyCheckSector+0xcc>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	440b      	add	r3, r1
 8000d10:	3304      	adds	r3, #4
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
      
      /* sanity check. sector base address should be 32-bit aligned and the size
       * should be a multiple of 32-bits.
       */
      ASSERT_RT(((sectorAddr % sizeof(blt_int32u)) == 0) && 
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d104      	bne.n	8000d2a <FlashEmptyCheckSector+0x66>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0303 	and.w	r3, r3, #3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <FlashEmptyCheckSector+0x70>
 8000d2a:	f240 21b2 	movw	r1, #690	; 0x2b2
 8000d2e:	4819      	ldr	r0, [pc, #100]	; (8000d94 <FlashEmptyCheckSector+0xd0>)
 8000d30:	f7ff fa4a 	bl	80001c8 <AssertFailure>
                ((sectorSize % sizeof(blt_int32u)) == 0));  
      
      /* update result to success for now */
      result = BLT_TRUE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	77fb      	strb	r3, [r7, #31]
      /* initialize the pointer to the first word in the sector */
      wordPtr = (blt_int32u volatile const *)sectorAddr;
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	617b      	str	r3, [r7, #20]
      /* read sector 32-bits at a time */
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	e014      	b.n	8000d6c <FlashEmptyCheckSector+0xa8>
      {
        /* service the watchdog every 256th loop iteration */
        if ((wordCnt % 256) == 0)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <FlashEmptyCheckSector+0x8a>
        {
          CopService();
 8000d4a:	f7ff fd00 	bl	800074e <CopService>
        }
        /* word not in the erased state? */
        if (*wordPtr != 0xFFFFFFFFu)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d56:	d003      	beq.n	8000d60 <FlashEmptyCheckSector+0x9c>
        {
          /* sector not empty, update the result accordingly */
          result = BLT_FALSE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	77fb      	strb	r3, [r7, #31]
          /* no point in continuing the sector empty check */
          break;
 8000d5c:	bf00      	nop
        }
        /* set pointer to the next word in the sector */
        wordPtr++;
      }
      /* sector index found and checked. no need to continue with another one.*/
      break;
 8000d5e:	e011      	b.n	8000d84 <FlashEmptyCheckSector+0xc0>
        wordPtr++;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3304      	adds	r3, #4
 8000d64:	617b      	str	r3, [r7, #20]
      for (wordCnt = 0; wordCnt < (sectorSize/sizeof(blt_int32u)); wordCnt++)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	089b      	lsrs	r3, r3, #2
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3e5      	bcc.n	8000d42 <FlashEmptyCheckSector+0x7e>
      break;
 8000d76:	e005      	b.n	8000d84 <FlashEmptyCheckSector+0xc0>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000d78:	7fbb      	ldrb	r3, [r7, #30]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	77bb      	strb	r3, [r7, #30]
 8000d7e:	7fbb      	ldrb	r3, [r7, #30]
 8000d80:	2b15      	cmp	r3, #21
 8000d82:	d9a9      	bls.n	8000cd8 <FlashEmptyCheckSector+0x14>
    }
  }  
  /* give the result back to the caller. */
  return result;
 8000d84:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of FlashEmptyCheckSector ***/
 8000d86:	4618      	mov	r0, r3
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	0800563c 	.word	0x0800563c
 8000d94:	08005604 	.word	0x08005604

08000d98 <FlashEraseSectors>:
** \param     last_sector  Last flash sector number.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool FlashEraseSectors(blt_int8u first_sector, blt_int8u last_sector)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
  blt_bool result = BLT_TRUE;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  blt_int8u sectorIdx;
  FLASH_EraseInitTypeDef eraseInitStruct;
  blt_int32u eraseSectorError = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]

  /* validate the sector numbers */
  if (first_sector > last_sector)
 8000db2:	79fa      	ldrb	r2, [r7, #7]
 8000db4:	79bb      	ldrb	r3, [r7, #6]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d902      	bls.n	8000dc0 <FlashEraseSectors+0x28>
  {
    result = BLT_FALSE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if ((first_sector < flashLayout[0].sector_num) || \
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d303      	bcc.n	8000dd0 <FlashEraseSectors+0x38>
      (last_sector > flashLayout[FLASH_TOTAL_SECTORS-1].sector_num))
 8000dc8:	2217      	movs	r2, #23
  if ((first_sector < flashLayout[0].sector_num) || \
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d902      	bls.n	8000dd6 <FlashEraseSectors+0x3e>
  {
    result = BLT_FALSE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* only move forward with the erase operation if all is okay so far */
  if (result == BLT_TRUE)
 8000dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d133      	bne.n	8000e46 <FlashEraseSectors+0xae>
  {
    /* intialize the sector erase info structure */
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000de2:	2302      	movs	r3, #2
 8000de4:	623b      	str	r3, [r7, #32]
    eraseInitStruct.NbSectors = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	61fb      	str	r3, [r7, #28]

    /* unlock the flash array */
    HAL_FLASH_Unlock();
 8000dea:	f002 ffe5 	bl	8003db8 <HAL_FLASH_Unlock>

    /* erase all sectors one by one */
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000df4:	e020      	b.n	8000e38 <FlashEraseSectors+0xa0>
    {
      /* no need to erase the sector if it is already empty */
      if (FlashEmptyCheckSector(sectorIdx) == BLT_FALSE)
 8000df6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff62 	bl	8000cc4 <FlashEmptyCheckSector>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d113      	bne.n	8000e2e <FlashEraseSectors+0x96>
      {
        /* keep the watchdog happy */
        CopService();
 8000e06:	f7ff fca2 	bl	800074e <CopService>
        /* set the sector to erase */
        eraseInitStruct.Sector = sectorIdx;
 8000e0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e0e:	61bb      	str	r3, [r7, #24]
        /* submit the sector erase request */
        if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8000e10:	f107 020c 	add.w	r2, r7, #12
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 f92e 	bl	800407c <HAL_FLASHEx_Erase>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <FlashEraseSectors+0x96>
        {
          /* could not perform erase operation */
          result = BLT_FALSE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          /* error detected so don't bother continuing with the loop */
          break;
 8000e2c:	e009      	b.n	8000e42 <FlashEraseSectors+0xaa>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8000e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e32:	3301      	adds	r3, #1
 8000e34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e38:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d9d9      	bls.n	8000df6 <FlashEraseSectors+0x5e>
        }
      }
    }

    /* lock the flash array again */
    HAL_FLASH_Lock();
 8000e42:	f002 ffdb 	bl	8003dfc <HAL_FLASH_Lock>
  }

  /* give the result back to the caller */
  return result;
 8000e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
} /*** end of FlashEraseSectors ***/
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  blt_int8u result = FLASH_INVALID_SECTOR;
 8000e5c:	23ff      	movs	r3, #255	; 0xff
 8000e5e:	73fb      	strb	r3, [r7, #15]
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	73bb      	strb	r3, [r7, #14]
 8000e64:	e02f      	b.n	8000ec6 <FlashGetSector+0x72>
  {
    /* keep the watchdog happy */
    CopService();
 8000e66:	f7ff fc72 	bl	800074e <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000e6a:	7bba      	ldrb	r2, [r7, #14]
 8000e6c:	491a      	ldr	r1, [pc, #104]	; (8000ed8 <FlashGetSector+0x84>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d31f      	bcc.n	8000ec0 <FlashGetSector+0x6c>
        (address < (flashLayout[sectorIdx].sector_start + \
 8000e80:	7bba      	ldrb	r2, [r7, #14]
 8000e82:	4915      	ldr	r1, [pc, #84]	; (8000ed8 <FlashGetSector+0x84>)
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	6819      	ldr	r1, [r3, #0]
                    flashLayout[sectorIdx].sector_size)))
 8000e90:	7bba      	ldrb	r2, [r7, #14]
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <FlashGetSector+0x84>)
 8000e94:	4613      	mov	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4413      	add	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4403      	add	r3, r0
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
        (address < (flashLayout[sectorIdx].sector_start + \
 8000ea2:	440b      	add	r3, r1
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d20a      	bcs.n	8000ec0 <FlashGetSector+0x6c>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8000eaa:	7bba      	ldrb	r2, [r7, #14]
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <FlashGetSector+0x84>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3308      	adds	r3, #8
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	73fb      	strb	r3, [r7, #15]
      /* all done so no need to continue looping */
      break;
 8000ebe:	e005      	b.n	8000ecc <FlashGetSector+0x78>
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73bb      	strb	r3, [r7, #14]
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	2b15      	cmp	r3, #21
 8000eca:	d9cc      	bls.n	8000e66 <FlashGetSector+0x12>
    }
  }
  /* give the result back to the caller */
  return result;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of FlashGetSector ***/
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	0800563c 	.word	0x0800563c

08000edc <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 8000ee0:	2064      	movs	r0, #100	; 0x64
 8000ee2:	f000 f809 	bl	8000ef8 <LedBlinkInit>
} /*** end of CopInitHook ***/
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8000eee:	f000 f813 	bl	8000f18 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <LedBlinkInit>:
** \param     interval_ms Specifies the desired LED blink interval time in milliseconds.
** \return    none.
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <LedBlinkInit+0x1c>)
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	8013      	strh	r3, [r2, #0]
} /*** end of LedBlinkInit ***/
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	200004ec 	.word	0x200004ec

08000f18 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8000f1c:	f001 fa70 	bl	8002400 <TimerGet>
 8000f20:	4602      	mov	r2, r0
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <LedBlinkTask+0x50>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d31c      	bcc.n	8000f64 <LedBlinkTask+0x4c>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <LedBlinkTask+0x54>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d108      	bne.n	8000f44 <LedBlinkTask+0x2c>
    {
      ledOn = BLT_TRUE;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <LedBlinkTask+0x54>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(Enable_Inverter_MCU_GPIO_Port, Enable_Inverter_MCU_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LedBlinkTask+0x58>)
 8000f3e:	f003 fb5b 	bl	80045f8 <HAL_GPIO_WritePin>
 8000f42:	e007      	b.n	8000f54 <LedBlinkTask+0x3c>
    }
    else
    {
      ledOn = BLT_FALSE;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <LedBlinkTask+0x54>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(Enable_Inverter_MCU_GPIO_Port, Enable_Inverter_MCU_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <LedBlinkTask+0x58>)
 8000f50:	f003 fb52 	bl	80045f8 <HAL_GPIO_WritePin>
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8000f54:	f001 fa54 	bl	8002400 <TimerGet>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <LedBlinkTask+0x5c>)
 8000f5c:	8812      	ldrh	r2, [r2, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a01      	ldr	r2, [pc, #4]	; (8000f68 <LedBlinkTask+0x50>)
 8000f62:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200004f0 	.word	0x200004f0
 8000f6c:	200004f4 	.word	0x200004f4
 8000f70:	40020400 	.word	0x40020400
 8000f74:	200004ec 	.word	0x200004ec

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800108a:	b480      	push	{r7}
 800108c:	b089      	sub	sp, #36	; 0x24
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	332c      	adds	r3, #44	; 0x2c
 800109a:	4619      	mov	r1, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010a6:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	fa92 f2a2 	rbit	r2, r2
 80010ae:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	40d3      	lsrs	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	211f      	movs	r1, #31
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	401a      	ands	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 011f 	and.w	r1, r3, #31
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	431a      	orrs	r2, r3
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800111c:	b480      	push	{r7}
 800111e:	b08d      	sub	sp, #52	; 0x34
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	330c      	adds	r3, #12
 800112c:	4619      	mov	r1, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	fa92 f2a2 	rbit	r2, r2
 8001140:	617a      	str	r2, [r7, #20]
  return result;
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	fab2 f282 	clz	r2, r2
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	40d3      	lsrs	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800115c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001160:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	6a39      	ldr	r1, [r7, #32]
 8001164:	fa91 f1a1 	rbit	r1, r1
 8001168:	61f9      	str	r1, [r7, #28]
  return result;
 800116a:	69f9      	ldr	r1, [r7, #28]
 800116c:	fab1 f181 	clz	r1, r1
 8001170:	b2c9      	uxtb	r1, r1
 8001172:	40cb      	lsrs	r3, r1
 8001174:	2107      	movs	r1, #7
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	401a      	ands	r2, r3
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8001184:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8001188:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118c:	fa91 f1a1 	rbit	r1, r1
 8001190:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8001192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001194:	fab1 f181 	clz	r1, r1
 8001198:	b2c9      	uxtb	r1, r1
 800119a:	40cb      	lsrs	r3, r1
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	431a      	orrs	r2, r3
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80011a8:	bf00      	nop
 80011aa:	3734      	adds	r7, #52	; 0x34
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <LL_DMA_SetDataTransferDirection+0x44>)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80011f8:	4908      	ldr	r1, [pc, #32]	; (800121c <LL_DMA_SetDataTransferDirection+0x44>)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	440b      	add	r3, r1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	440b      	add	r3, r1
 8001206:	4619      	mov	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	08005744 	.word	0x08005744

08001220 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <LL_DMA_SetMode+0x44>)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001240:	4908      	ldr	r1, [pc, #32]	; (8001264 <LL_DMA_SetMode+0x44>)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	440b      	add	r3, r1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	440b      	add	r3, r1
 800124e:	4619      	mov	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	08005744 	.word	0x08005744

08001268 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <LL_DMA_SetPeriphIncMode+0x44>)
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001288:	4908      	ldr	r1, [pc, #32]	; (80012ac <LL_DMA_SetPeriphIncMode+0x44>)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	440b      	add	r3, r1
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	440b      	add	r3, r1
 8001296:	4619      	mov	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	08005744 	.word	0x08005744

080012b0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LL_DMA_SetMemoryIncMode+0x44>)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80012d0:	4908      	ldr	r1, [pc, #32]	; (80012f4 <LL_DMA_SetMemoryIncMode+0x44>)
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	440b      	add	r3, r1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	440b      	add	r3, r1
 80012de:	4619      	mov	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	08005744 	.word	0x08005744

080012f8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LL_DMA_SetPeriphSize+0x44>)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001318:	4908      	ldr	r1, [pc, #32]	; (800133c <LL_DMA_SetPeriphSize+0x44>)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	440b      	add	r3, r1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	440b      	add	r3, r1
 8001326:	4619      	mov	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	08005744 	.word	0x08005744

08001340 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <LL_DMA_SetMemorySize+0x44>)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001360:	4908      	ldr	r1, [pc, #32]	; (8001384 <LL_DMA_SetMemorySize+0x44>)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	440b      	add	r3, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	440b      	add	r3, r1
 800136e:	4619      	mov	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	08005744 	.word	0x08005744

08001388 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4413      	add	r3, r2
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013a8:	4908      	ldr	r1, [pc, #32]	; (80013cc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	440b      	add	r3, r1
 80013b6:	4619      	mov	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	08005744 	.word	0x08005744

080013d0 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <LL_DMA_SetChannelSelection+0x44>)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80013f0:	4908      	ldr	r1, [pc, #32]	; (8001414 <LL_DMA_SetChannelSelection+0x44>)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	440b      	add	r3, r1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	440b      	add	r3, r1
 80013fe:	4619      	mov	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	08005744 	.word	0x08005744

08001418 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8001422:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <LL_DMA_DisableFifoMode+0x3c>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <LL_DMA_DisableFifoMode+0x3c>)
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	440a      	add	r2, r1
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	4611      	mov	r1, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	440a      	add	r2, r1
 8001440:	f023 0304 	bic.w	r3, r3, #4
 8001444:	6153      	str	r3, [r2, #20]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	08005744 	.word	0x08005744

08001458 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <LL_RCC_HSE_Enable+0x1c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <LL_RCC_HSE_Enable+0x1c>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <LL_RCC_HSE_IsReady+0x24>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001488:	bf0c      	ite	eq
 800148a:	2301      	moveq	r3, #1
 800148c:	2300      	movne	r3, #0
 800148e:	b2db      	uxtb	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LL_RCC_SetSysClkSource+0x24>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 0203 	bic.w	r2, r3, #3
 80014b0:	4904      	ldr	r1, [pc, #16]	; (80014c4 <LL_RCC_SetSysClkSource+0x24>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40023800 	.word	0x40023800

080014c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <LL_RCC_GetSysClkSource+0x18>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <LL_RCC_SetAHBPrescaler+0x24>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f4:	4904      	ldr	r1, [pc, #16]	; (8001508 <LL_RCC_SetAHBPrescaler+0x24>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40023800 	.word	0x40023800

0800150c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800151c:	4904      	ldr	r1, [pc, #16]	; (8001530 <LL_RCC_SetAPB1Prescaler+0x24>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40023800 	.word	0x40023800

08001534 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <LL_RCC_SetAPB2Prescaler+0x24>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001544:	4904      	ldr	r1, [pc, #16]	; (8001558 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40023800 	.word	0x40023800

0800155c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_RCC_PLL_Enable+0x1c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <LL_RCC_PLL_Enable+0x1c>)
 8001566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <LL_RCC_PLL_IsReady+0x24>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	0192      	lsls	r2, r2, #6
 80015c4:	430a      	orrs	r2, r1
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40023800 	.word	0x40023800
 80015ec:	ffbf8000 	.word	0xffbf8000

080015f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4313      	orrs	r3, r2
 8001602:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40023800 	.word	0x40023800

08001620 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <LL_APB1_GRP1_EnableClock+0x2c>)
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162c:	4907      	ldr	r1, [pc, #28]	; (800164c <LL_APB1_GRP1_EnableClock+0x2c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4313      	orrs	r3, r2
 8001632:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4013      	ands	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	40023800 	.word	0x40023800

08001650 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <LL_APB2_GRP1_EnableClock+0x2c>)
 800165a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <LL_APB2_GRP1_EnableClock+0x2c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4013      	ands	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40023800 	.word	0x40023800

08001680 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800168a:	4a13      	ldr	r2, [pc, #76]	; (80016d8 <LL_SYSCFG_SetEXTISource+0x58>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3302      	adds	r3, #2
 8001692:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	0c1b      	lsrs	r3, r3, #16
 800169a:	43db      	mvns	r3, r3
 800169c:	ea02 0103 	and.w	r1, r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	60bb      	str	r3, [r7, #8]
  return result;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	fa03 f202 	lsl.w	r2, r3, r2
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <LL_SYSCFG_SetEXTISource+0x58>)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	430a      	orrs	r2, r1
 80016c6:	3302      	adds	r3, #2
 80016c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40013800 	.word	0x40013800

080016dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <LL_FLASH_SetLatency+0x24>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 0207 	bic.w	r2, r3, #7
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <LL_FLASH_SetLatency+0x24>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40023c00 	.word	0x40023c00

08001704 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <LL_FLASH_GetLatency+0x18>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0307 	and.w	r3, r3, #7
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40007000 	.word	0x40007000

08001748 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d01c      	beq.n	80017b2 <LL_TIM_OC_DisableFast+0x4a>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d017      	beq.n	80017ae <LL_TIM_OC_DisableFast+0x46>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b10      	cmp	r3, #16
 8001782:	d012      	beq.n	80017aa <LL_TIM_OC_DisableFast+0x42>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	2b40      	cmp	r3, #64	; 0x40
 8001788:	d00d      	beq.n	80017a6 <LL_TIM_OC_DisableFast+0x3e>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001790:	d007      	beq.n	80017a2 <LL_TIM_OC_DisableFast+0x3a>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001798:	d101      	bne.n	800179e <LL_TIM_OC_DisableFast+0x36>
 800179a:	2305      	movs	r3, #5
 800179c:	e00a      	b.n	80017b4 <LL_TIM_OC_DisableFast+0x4c>
 800179e:	2306      	movs	r3, #6
 80017a0:	e008      	b.n	80017b4 <LL_TIM_OC_DisableFast+0x4c>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e006      	b.n	80017b4 <LL_TIM_OC_DisableFast+0x4c>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <LL_TIM_OC_DisableFast+0x4c>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <LL_TIM_OC_DisableFast+0x4c>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <LL_TIM_OC_DisableFast+0x4c>
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3318      	adds	r3, #24
 80017ba:	4619      	mov	r1, r3
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LL_TIM_OC_DisableFast+0x84>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	440b      	add	r3, r1
 80017c4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	4908      	ldr	r1, [pc, #32]	; (80017f0 <LL_TIM_OC_DisableFast+0x88>)
 80017ce:	5ccb      	ldrb	r3, [r1, r3]
 80017d0:	4619      	mov	r1, r3
 80017d2:	2304      	movs	r3, #4
 80017d4:	408b      	lsls	r3, r1
 80017d6:	43db      	mvns	r3, r3
 80017d8:	401a      	ands	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	601a      	str	r2, [r3, #0]

}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	0800574c 	.word	0x0800574c
 80017f0:	08005754 	.word	0x08005754

080017f4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001806:	f023 0307 	bic.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	613b      	str	r3, [r7, #16]
  return result;
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2103      	movs	r1, #3
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	fa93 f3a3 	rbit	r3, r3
 800189e:	61bb      	str	r3, [r7, #24]
  return result;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	431a      	orrs	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b089      	sub	sp, #36	; 0x24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	613b      	str	r3, [r7, #16]
  return result;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2103      	movs	r1, #3
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	61bb      	str	r3, [r7, #24]
  return result;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	431a      	orrs	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	60da      	str	r2, [r3, #12]
}
 8001914:	bf00      	nop
 8001916:	3724      	adds	r7, #36	; 0x24
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	041a      	lsls	r2, r3, #16
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001942:	f001 f9cf 	bl	8002ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001946:	f000 f80f 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194a:	f000 f9df 	bl	8001d0c <MX_GPIO_Init>
  MX_DMA_Init();
 800194e:	f000 f9c4 	bl	8001cda <MX_DMA_Init>
  MX_ADC1_Init();
 8001952:	f000 f853 	bl	80019fc <MX_ADC1_Init>
  MX_CAN1_Init();
 8001956:	f000 f929 	bl	8001bac <MX_CAN1_Init>
  MX_TIM2_Init();
 800195a:	f000 f95f 	bl	8001c1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BootInit();
 800195e:	f7fe fc81 	bl	8000264 <BootInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BootTask();
 8001962:	f7fe fc8f 	bl	8000284 <BootTask>
 8001966:	e7fc      	b.n	8001962 <main+0x24>

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800196c:	2002      	movs	r0, #2
 800196e:	f7ff feb5 	bl	80016dc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001972:	bf00      	nop
 8001974:	f7ff fec6 	bl	8001704 <LL_FLASH_GetLatency>
 8001978:	4603      	mov	r3, r0
 800197a:	2b02      	cmp	r3, #2
 800197c:	d1fa      	bne.n	8001974 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800197e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001982:	f7ff fecd 	bl	8001720 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001986:	f7ff fd67 	bl	8001458 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800198a:	bf00      	nop
 800198c:	f7ff fd74 	bl	8001478 <LL_RCC_HSE_IsReady>
 8001990:	4603      	mov	r3, r0
 8001992:	2b01      	cmp	r3, #1
 8001994:	d1fa      	bne.n	800198c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_10, 64, LL_RCC_PLLP_DIV_2);
 8001996:	2300      	movs	r3, #0
 8001998:	2240      	movs	r2, #64	; 0x40
 800199a:	210a      	movs	r1, #10
 800199c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80019a0:	f7ff fe00 	bl	80015a4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80019a4:	f7ff fdda 	bl	800155c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80019a8:	bf00      	nop
 80019aa:	f7ff fde7 	bl	800157c <LL_RCC_PLL_IsReady>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d1fa      	bne.n	80019aa <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fd95 	bl	80014e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80019ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019be:	f7ff fda5 	bl	800150c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_4);
 80019c2:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 80019c6:	f7ff fdb5 	bl	8001534 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7ff fd68 	bl	80014a0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80019d0:	bf00      	nop
 80019d2:	f7ff fd79 	bl	80014c8 <LL_RCC_GetSysClkSource>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d1fa      	bne.n	80019d2 <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(64000000);
 80019dc:	4806      	ldr	r0, [pc, #24]	; (80019f8 <SystemClock_Config+0x90>)
 80019de:	f003 fdbf 	bl	8005560 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80019e2:	200f      	movs	r0, #15
 80019e4:	f001 f9d4 	bl	8002d90 <HAL_InitTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80019ee:	f000 fa63 	bl	8001eb8 <Error_Handler>
  }
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	03d09000 	.word	0x03d09000

080019fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b092      	sub	sp, #72	; 0x48
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001a02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001a3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a40:	f7ff fe06 	bl	8001650 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001a44:	2004      	movs	r0, #4
 8001a46:	f7ff fdd3 	bl	80015f0 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PC0   ------> ADC1_IN10
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  */
  GPIO_InitStruct.Pin = BSE_ADC_Pin|TT_ADC_Pin|SUS_ADC_Pin;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a56:	463b      	mov	r3, r7
 8001a58:	4619      	mov	r1, r3
 8001a5a:	484e      	ldr	r0, [pc, #312]	; (8001b94 <MX_ADC1_Init+0x198>)
 8001a5c:	f003 f8e0 	bl	8004c20 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	484c      	ldr	r0, [pc, #304]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001a66:	f7ff fcb3 	bl	80013d0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	484a      	ldr	r0, [pc, #296]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001a70:	f7ff fbb2 	bl	80011d8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	4847      	ldr	r0, [pc, #284]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001a7a:	f7ff fc85 	bl	8001388 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8001a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a82:	2100      	movs	r1, #0
 8001a84:	4844      	ldr	r0, [pc, #272]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001a86:	f7ff fbcb 	bl	8001220 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4842      	ldr	r0, [pc, #264]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001a90:	f7ff fbea 	bl	8001268 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a98:	2100      	movs	r1, #0
 8001a9a:	483f      	ldr	r0, [pc, #252]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001a9c:	f7ff fc08 	bl	80012b0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_WORD);
 8001aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	483c      	ldr	r0, [pc, #240]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001aa8:	f7ff fc26 	bl	80012f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_WORD);
 8001aac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4839      	ldr	r0, [pc, #228]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001ab4:	f7ff fc44 	bl	8001340 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4837      	ldr	r0, [pc, #220]	; (8001b98 <MX_ADC1_Init+0x19c>)
 8001abc:	f7ff fcac 	bl	8001418 <LL_DMA_DisableFifoMode>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ac0:	f7ff fa5a 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff faaa 	bl	8001024 <NVIC_EncodePriority>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2012      	movs	r0, #18
 8001ad6:	f7ff fa7b 	bl	8000fd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 8001ada:	2012      	movs	r0, #18
 8001adc:	f7ff fa5a 	bl	8000f94 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8001ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aec:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001aee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001af2:	4619      	mov	r1, r3
 8001af4:	4829      	ldr	r0, [pc, #164]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001af6:	f002 fe07 	bl	8004708 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM2_TRGO;
 8001afa:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS;
 8001b00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4820      	ldr	r0, [pc, #128]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b1c:	f002 fe20 	bl	8004760 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8001b20:	2100      	movs	r1, #0
 8001b22:	481e      	ldr	r0, [pc, #120]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b24:	f7ff fae7 	bl	80010f6 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b2c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	4619      	mov	r1, r3
 8001b38:	4819      	ldr	r0, [pc, #100]	; (8001ba0 <MX_ADC1_Init+0x1a4>)
 8001b3a:	f002 fd9d 	bl	8004678 <LL_ADC_CommonInit>
  LL_ADC_REG_StartConversionExtTrig(ADC1, LL_ADC_REG_TRIG_EXT_RISINGFALLING);
 8001b3e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8001b42:	4816      	ldr	r0, [pc, #88]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b44:	f7ff fb36 	bl	80011b4 <LL_ADC_REG_StartConversionExtTrig>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_12);
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <MX_ADC1_Init+0x1a8>)
 8001b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4e:	4813      	ldr	r0, [pc, #76]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b50:	f7ff fa9b 	bl	800108a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_56CYCLES);
 8001b54:	2203      	movs	r2, #3
 8001b56:	4913      	ldr	r1, [pc, #76]	; (8001ba4 <MX_ADC1_Init+0x1a8>)
 8001b58:	4810      	ldr	r0, [pc, #64]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b5a:	f7ff fadf 	bl	800111c <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_ADC1_Init+0x1ac>)
 8001b60:	f240 2105 	movw	r1, #517	; 0x205
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b66:	f7ff fa90 	bl	800108a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_56CYCLES);
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	490e      	ldr	r1, [pc, #56]	; (8001ba8 <MX_ADC1_Init+0x1ac>)
 8001b6e:	480b      	ldr	r0, [pc, #44]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b70:	f7ff fad4 	bl	800111c <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_10);
 8001b74:	220a      	movs	r2, #10
 8001b76:	f240 210a 	movw	r1, #522	; 0x20a
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b7c:	f7ff fa85 	bl	800108a <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_56CYCLES);
 8001b80:	2203      	movs	r2, #3
 8001b82:	210a      	movs	r1, #10
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_ADC1_Init+0x1a0>)
 8001b86:	f7ff fac9 	bl	800111c <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	3748      	adds	r7, #72	; 0x48
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40026400 	.word	0x40026400
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	40012300 	.word	0x40012300
 8001ba4:	0060000c 	.word	0x0060000c
 8001ba8:	0030000b 	.word	0x0030000b

08001bac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bb2:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <MX_CAN1_Init+0x6c>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bb8:	2204      	movs	r2, #4
 8001bba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bcc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001bd0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bd8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_CAN1_Init+0x68>)
 8001c00:	f001 f90a 	bl	8002e18 <HAL_CAN_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001c0a:	f000 f955 	bl	8001eb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200004f8 	.word	0x200004f8
 8001c18:	40006400 	.word	0x40006400

08001c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fcc5 	bl	80055c8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f7ff fcee 	bl	8001620 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001c44:	f7ff f998 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f9e8 	bl	8001024 <NVIC_EncodePriority>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4619      	mov	r1, r3
 8001c58:	201c      	movs	r0, #28
 8001c5a:	f7ff f9b9 	bl	8000fd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001c5e:	201c      	movs	r0, #28
 8001c60:	f7ff f998 	bl	8000f94 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 79;
 8001c64:	234f      	movs	r3, #79	; 0x4f
 8001c66:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 15;
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c7e:	f003 f9ef 	bl	8005060 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001c82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c86:	f7ff fd5f 	bl	8001748 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001c90:	f7ff fdb0 	bl	80017f4 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	461a      	mov	r2, r3
 8001cac:	2101      	movs	r1, #1
 8001cae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cb2:	f003 fa6f 	bl	8005194 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cbc:	f7ff fd54 	bl	8001768 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cc6:	f7ff fdaa 	bl	800181e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001cca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cce:	f7ff fdb9 	bl	8001844 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3738      	adds	r7, #56	; 0x38
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001cde:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ce2:	f7ff fc85 	bl	80015f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ce6:	f7ff f947 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff f997 	bl	8001024 <NVIC_EncodePriority>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	2038      	movs	r0, #56	; 0x38
 8001cfc:	f7ff f968 	bl	8000fd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d00:	2038      	movs	r0, #56	; 0x38
 8001d02:	f7ff f947 	bl	8000f94 <__NVIC_EnableIRQ>

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001d12:	f107 0318 	add.w	r3, r7, #24
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001d2c:	2080      	movs	r0, #128	; 0x80
 8001d2e:	f7ff fc5f 	bl	80015f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001d32:	2004      	movs	r0, #4
 8001d34:	f7ff fc5c 	bl	80015f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff fc59 	bl	80015f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f7ff fc56 	bl	80015f0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(sad_GPIO_Port, sad_Pin);
 8001d44:	2104      	movs	r1, #4
 8001d46:	4855      	ldr	r0, [pc, #340]	; (8001e9c <MX_GPIO_Init+0x190>)
 8001d48:	f7ff fdea 	bl	8001920 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Enable_Inverter_MCU_GPIO_Port, Enable_Inverter_MCU_Pin);
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	4854      	ldr	r0, [pc, #336]	; (8001ea0 <MX_GPIO_Init+0x194>)
 8001d50:	f7ff fde6 	bl	8001920 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = sad_Pin;
 8001d54:	2304      	movs	r3, #4
 8001d56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(sad_GPIO_Port, &GPIO_InitStruct);
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	484b      	ldr	r0, [pc, #300]	; (8001e9c <MX_GPIO_Init+0x190>)
 8001d6e:	f002 ff57 	bl	8004c20 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Enable_Inverter_MCU_Pin;
 8001d72:	2304      	movs	r3, #4
 8001d74:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d76:	2301      	movs	r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Enable_Inverter_MCU_GPIO_Port, &GPIO_InitStruct);
 8001d86:	463b      	mov	r3, r7
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4845      	ldr	r0, [pc, #276]	; (8001ea0 <MX_GPIO_Init+0x194>)
 8001d8c:	f002 ff48 	bl	8004c20 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE10);
 8001d90:	4944      	ldr	r1, [pc, #272]	; (8001ea4 <MX_GPIO_Init+0x198>)
 8001d92:	2002      	movs	r0, #2
 8001d94:	f7ff fc74 	bl	8001680 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE11);
 8001d98:	4943      	ldr	r1, [pc, #268]	; (8001ea8 <MX_GPIO_Init+0x19c>)
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f7ff fc70 	bl	8001680 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE5);
 8001da0:	4942      	ldr	r1, [pc, #264]	; (8001eac <MX_GPIO_Init+0x1a0>)
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff fc6c 	bl	8001680 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE7);
 8001da8:	4941      	ldr	r1, [pc, #260]	; (8001eb0 <MX_GPIO_Init+0x1a4>)
 8001daa:	2001      	movs	r0, #1
 8001dac:	f7ff fc68 	bl	8001680 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8001db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db4:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001dc2:	f107 0318 	add.w	r3, r7, #24
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fda4 	bl	8004914 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8001dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dd0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001dde:	f107 0318 	add.w	r3, r7, #24
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fd96 	bl	8004914 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8001de8:	2320      	movs	r3, #32
 8001dea:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001df4:	2303      	movs	r3, #3
 8001df6:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fd89 	bl	8004914 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e06:	2301      	movs	r3, #1
 8001e08:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 fd7c 	bl	8004914 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(SDC_OUT_MCU_GPIO_Port, SDC_OUT_MCU_Pin, LL_GPIO_PULL_NO);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e22:	4824      	ldr	r0, [pc, #144]	; (8001eb4 <MX_GPIO_Init+0x1a8>)
 8001e24:	f7ff fd4d 	bl	80018c2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SDC_IN_MCU_GPIO_Port, SDC_IN_MCU_Pin, LL_GPIO_PULL_NO);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e2e:	4821      	ldr	r0, [pc, #132]	; (8001eb4 <MX_GPIO_Init+0x1a8>)
 8001e30:	f7ff fd47 	bl	80018c2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SUS_Fuse_GPIO_Port, SUS_Fuse_Pin, LL_GPIO_PULL_NO);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2120      	movs	r1, #32
 8001e38:	4819      	ldr	r0, [pc, #100]	; (8001ea0 <MX_GPIO_Init+0x194>)
 8001e3a:	f7ff fd42 	bl	80018c2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BSE_Fuse_GPIO_Port, BSE_Fuse_Pin, LL_GPIO_PULL_NO);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <MX_GPIO_Init+0x194>)
 8001e44:	f7ff fd3d 	bl	80018c2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(SDC_OUT_MCU_GPIO_Port, SDC_OUT_MCU_Pin, LL_GPIO_MODE_INPUT);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4e:	4819      	ldr	r0, [pc, #100]	; (8001eb4 <MX_GPIO_Init+0x1a8>)
 8001e50:	f7ff fd08 	bl	8001864 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SDC_IN_MCU_GPIO_Port, SDC_IN_MCU_Pin, LL_GPIO_MODE_INPUT);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e5a:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <MX_GPIO_Init+0x1a8>)
 8001e5c:	f7ff fd02 	bl	8001864 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SUS_Fuse_GPIO_Port, SUS_Fuse_Pin, LL_GPIO_MODE_INPUT);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2120      	movs	r1, #32
 8001e64:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <MX_GPIO_Init+0x194>)
 8001e66:	f7ff fcfd 	bl	8001864 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BSE_Fuse_GPIO_Port, BSE_Fuse_Pin, LL_GPIO_MODE_INPUT);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <MX_GPIO_Init+0x194>)
 8001e70:	f7ff fcf8 	bl	8001864 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e74:	f7ff f880 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff f8d0 	bl	8001024 <NVIC_EncodePriority>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	2028      	movs	r0, #40	; 0x28
 8001e8a:	f7ff f8a1 	bl	8000fd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e8e:	2028      	movs	r0, #40	; 0x28
 8001e90:	f7ff f880 	bl	8000f94 <__NVIC_EnableIRQ>

}
 8001e94:	bf00      	nop
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	0f000002 	.word	0x0f000002
 8001ea8:	f0000002 	.word	0xf0000002
 8001eac:	00f00001 	.word	0x00f00001
 8001eb0:	f0000001 	.word	0xf0000001
 8001eb4:	40020800 	.word	0x40020800

08001eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ebc:	b672      	cpsid	i
}
 8001ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <Error_Handler+0x8>

08001ec2 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	af00      	add	r7, sp, #0
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8001ec6:	f7fe fcab 	bl	8000820 <FlashInit>
} /*** end of NvmInit ***/
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f7fe fcb2 	bl	8000848 <FlashWrite>
 8001ee4:	4603      	mov	r3, r0
} /*** end of NvmWrite ***/
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8001ef8:	6839      	ldr	r1, [r7, #0]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fcee 	bl	80008dc <FlashErase>
 8001f00:	4603      	mov	r3, r0
} /*** end of NvmErase ***/
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8001f0e:	f7fe fd6f 	bl	80009f0 <FlashVerifyChecksum>
 8001f12:	4603      	mov	r3, r0
#endif
} /*** end of NvmVerifyChecksum ***/
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  return FlashGetUserProgBaseAddress();
 8001f1c:	f7fe fdd0 	bl	8000ac0 <FlashGetUserProgBaseAddress>
 8001f20:	4603      	mov	r3, r0
} /*** end of NvmGetUserProgBaseAddress ***/
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8001f2a:	f7fe fd0d 	bl	8000948 <FlashWriteChecksum>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <NvmDone+0x12>
  {
    return BLT_FALSE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e002      	b.n	8001f3e <NvmDone+0x18>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
 8001f38:	f7fe fd9e 	bl	8000a78 <FlashDone>
 8001f3c:	4603      	mov	r3, r0
} /*** end of NvmDone ***/
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_MspInit+0x58>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_MspInit+0x58>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_MspInit+0x58>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_MspInit+0x58>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_MspInit+0x58>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_MspInit+0x58>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2005      	movs	r0, #5
 8001f88:	f001 fe8b 	bl	8003ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001f8c:	2005      	movs	r0, #5
 8001f8e:	f001 fea4 	bl	8003cda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a29      	ldr	r2, [pc, #164]	; (8002064 <HAL_CAN_MspInit+0xc4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d14c      	bne.n	800205c <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_CAN_MspInit+0xc8>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_CAN_MspInit+0xc8>)
 8001fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_CAN_MspInit+0xc8>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_CAN_MspInit+0xc8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a20      	ldr	r2, [pc, #128]	; (8002068 <HAL_CAN_MspInit+0xc8>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_CAN_MspInit+0xc8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800200c:	2309      	movs	r3, #9
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4815      	ldr	r0, [pc, #84]	; (800206c <HAL_CAN_MspInit+0xcc>)
 8002018:	f002 f952 	bl	80042c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2013      	movs	r0, #19
 8002022:	f001 fe3e 	bl	8003ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002026:	2013      	movs	r0, #19
 8002028:	f001 fe57 	bl	8003cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800202c:	2200      	movs	r2, #0
 800202e:	2100      	movs	r1, #0
 8002030:	2014      	movs	r0, #20
 8002032:	f001 fe36 	bl	8003ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002036:	2014      	movs	r0, #20
 8002038:	f001 fe4f 	bl	8003cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2015      	movs	r0, #21
 8002042:	f001 fe2e 	bl	8003ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002046:	2015      	movs	r0, #21
 8002048:	f001 fe47 	bl	8003cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2016      	movs	r0, #22
 8002052:	f001 fe26 	bl	8003ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002056:	2016      	movs	r0, #22
 8002058:	f001 fe3f 	bl	8003cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40006400 	.word	0x40006400
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400

08002070 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002078:	4b07      	ldr	r3, [pc, #28]	; (8002098 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4013      	ands	r3, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40013c00 	.word	0x40013c00

0800209c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6153      	str	r3, [r2, #20]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40013c00 	.word	0x40013c00

080020bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <NMI_Handler+0x4>

080020c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <MemManage_Handler+0x4>

080020ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <UsageFault_Handler+0x4>

080020da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f000 fe72 	bl	8002df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <CAN1_TX_IRQHandler+0x10>)
 8002132:	f001 faa2 	bl	800367a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200004f8 	.word	0x200004f8

08002140 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <CAN1_RX0_IRQHandler+0x10>)
 8002146:	f001 fa98 	bl	800367a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200004f8 	.word	0x200004f8

08002154 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <CAN1_RX1_IRQHandler+0x10>)
 800215a:	f001 fa8e 	bl	800367a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200004f8 	.word	0x200004f8

08002168 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <CAN1_SCE_IRQHandler+0x10>)
 800216e:	f001 fa84 	bl	800367a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200004f8 	.word	0x200004f8

0800217c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 800218e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002192:	f7ff ff6d 	bl	8002070 <LL_EXTI_IsActiveFlag_0_31>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 800219c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021a0:	f7ff ff7c 	bl	800209c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 80021a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021a8:	f7ff ff62 	bl	8002070 <LL_EXTI_IsActiveFlag_0_31>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 80021b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021b6:	f7ff ff71 	bl	800209c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_11 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}

080021be <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <LL_APB2_GRP1_EnableClock>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <LL_APB2_GRP1_EnableClock+0x2c>)
 80021fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <LL_APB2_GRP1_EnableClock+0x2c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4313      	orrs	r3, r2
 8002202:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40023800 	.word	0x40023800

08002220 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <LL_APB2_GRP1_DisableClock+0x24>)
 800222a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	43db      	mvns	r3, r3
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <LL_APB2_GRP1_DisableClock+0x24>)
 8002232:	4013      	ands	r3, r2
 8002234:	644b      	str	r3, [r1, #68]	; 0x44
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <LL_APB2_GRP1_ForceReset+0x20>)
 8002252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002254:	4904      	ldr	r1, [pc, #16]	; (8002268 <LL_APB2_GRP1_ForceReset+0x20>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40023800 	.word	0x40023800

0800226c <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <LL_APB2_GRP1_ReleaseReset+0x24>)
 8002276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	43db      	mvns	r3, r3
 800227c:	4904      	ldr	r1, [pc, #16]	; (8002290 <LL_APB2_GRP1_ReleaseReset+0x24>)
 800227e:	4013      	ands	r3, r2
 8002280:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <LL_RCC_GetAPB2Prescaler>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <LL_RCC_GetAPB2Prescaler+0x18>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800

080022b0 <TimerInit>:
**            inline functions.
** \return    none.
**
****************************************************************************************/
void TimerInit(void)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0

  /* All STM32F4 derivatives support a TIM1 peripheral. Its free running counter will be
   * used to realize the polling based millisecond time reference in this module.
   * Start by enabling the periperhal.
   */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7ff ff9a 	bl	80021f0 <LL_APB2_GRP1_EnableClock>
  /* The TIM1 peripheral clock is derived from PCLK2. Obtain the PCLK2 frequency. */
  pclk2_frequency = __LL_RCC_CALC_PCLK2_FREQ(SystemCoreClock, LL_RCC_GetAPB2Prescaler());
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <TimerInit+0x84>)
 80022be:	681c      	ldr	r4, [r3, #0]
 80022c0:	f7ff ffe8 	bl	8002294 <LL_RCC_GetAPB2Prescaler>
 80022c4:	4603      	mov	r3, r0
 80022c6:	0b5b      	lsrs	r3, r3, #13
 80022c8:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <TimerInit+0x88>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	fa24 f303 	lsr.w	r3, r4, r3
 80022d0:	60fb      	str	r3, [r7, #12]
  /* According to the clock tree diagram in the RCC chapter of the reference manual,
   * the PCLK2-TIM frequency = PLCK2 * 1, when the APB2 prescaler is 1, otherwise it is
   * PCLK2 * 2.
   */
  tim_multiplier = (LL_RCC_GetAPB2Prescaler() == LL_RCC_APB2_DIV_1) ? 1U : 2U;
 80022d2:	f7ff ffdf 	bl	8002294 <LL_RCC_GetAPB2Prescaler>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <TimerInit+0x30>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <TimerInit+0x32>
 80022e0:	2302      	movs	r3, #2
 80022e2:	72fb      	strb	r3, [r7, #11]
  /* Obtain the PCLK2-TIM frequency. */
  pclk2_tim_frequency = pclk2_frequency * tim_multiplier;
 80022e4:	7afa      	ldrb	r2, [r7, #11]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	607b      	str	r3, [r7, #4]
  /* Configure the free running counter as a 16-bit upwards counter that runs at the
   * desired frequency and enable it.
   */
  TIM1->CR1 = TIM_CR1_CEN;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <TimerInit+0x8c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
  TIM1->ARR = 65535U;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <TimerInit+0x8c>)
 80022f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->PSC = (pclk2_tim_frequency / TIMER_COUNTER_FREQ_HZ) - 1U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <TimerInit+0x90>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	09db      	lsrs	r3, r3, #7
 8002308:	4a0c      	ldr	r2, [pc, #48]	; (800233c <TimerInit+0x8c>)
 800230a:	3b01      	subs	r3, #1
 800230c:	6293      	str	r3, [r2, #40]	; 0x28
  /* Generate an update event to reload the prescaler immediately. */
  TIM1->EGR |= TIM_EGR_UG;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <TimerInit+0x8c>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <TimerInit+0x8c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6153      	str	r3, [r2, #20]
  /* Initialize locals. */
  millisecond_counter = 0;
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <TimerInit+0x94>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
  free_running_counter_last = (blt_int16u)TIM1->CNT;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <TimerInit+0x8c>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <TimerInit+0x98>)
 8002328:	801a      	strh	r2, [r3, #0]
} /*** end of TimerInit ***/
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}
 8002332:	bf00      	nop
 8002334:	20000004 	.word	0x20000004
 8002338:	0800576c 	.word	0x0800576c
 800233c:	40010000 	.word	0x40010000
 8002340:	0a7c5ac5 	.word	0x0a7c5ac5
 8002344:	20000520 	.word	0x20000520
 8002348:	20000524 	.word	0x20000524

0800234c <TimerReset>:
**            configuration.
** \return    none.
**
****************************************************************************************/
void TimerReset(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Bring the TIM1 peripheral back into its reset state and disable its clock. */
  LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_TIM1);
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff ff79 	bl	8002248 <LL_APB2_GRP1_ForceReset>
  LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_TIM1);
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff ff88 	bl	800226c <LL_APB2_GRP1_ReleaseReset>
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800235c:	2001      	movs	r0, #1
 800235e:	f7ff ff5f 	bl	8002220 <LL_APB2_GRP1_DisableClock>
  /* Set the SysTick's registers back into the default reset value. Note that this module
   * does not use the SysTick, but HAL_Init() did initialize it.
   */
  SysTick->CTRL = 0;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <TimerReset+0x38>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <TimerReset+0x38>)
 800236a:	2200      	movs	r2, #0
 800236c:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <TimerReset+0x38>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  SCB->ICSR |= SCB_ICSR_PENDSTCLR_Msk;
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <TimerReset+0x3c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <TimerReset+0x3c>)
 800237a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800237e:	6053      	str	r3, [r2, #4]
} /* end of TimerReset */
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	e000e010 	.word	0xe000e010
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <TimerUpdate>:
** \brief     Updates the millisecond timer.
** \return    none.
**
****************************************************************************************/
void TimerUpdate(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
  blt_int16u free_running_counter_now;
  blt_int16u delta_counts;
  blt_int16u ms_counts;

  /* Get the current value of the free running counter. */
  free_running_counter_now = (blt_int16u)TIM1->CNT;
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <TimerUpdate+0x64>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	80fb      	strh	r3, [r7, #6]
  /* Calculate the number of counts that passed since the detection of the last
   * millisecond event. Note that this calculation also works, in case the free running
   * counter overflowed, thanks to integer math.
   */
  delta_counts = free_running_counter_now - free_running_counter_last;
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <TimerUpdate+0x68>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	88fa      	ldrh	r2, [r7, #6]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	80bb      	strh	r3, [r7, #4]

  /* Did one or more milliseconds pass since the last event? */
  if (delta_counts >= TIMER_COUNTS_PER_MS)
 80023a2:	88bb      	ldrh	r3, [r7, #4]
 80023a4:	2b63      	cmp	r3, #99	; 0x63
 80023a6:	d91c      	bls.n	80023e2 <TimerUpdate+0x56>
  {
    /* Calculate how many milliseconds passed. */
    ms_counts = delta_counts / TIMER_COUNTS_PER_MS;
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <TimerUpdate+0x6c>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	807b      	strh	r3, [r7, #2]
    /* Update the millisecond counter. */
    millisecond_counter += ms_counts;
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <TimerUpdate+0x70>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <TimerUpdate+0x70>)
 80023be:	6013      	str	r3, [r2, #0]
    /* Store the counter value of the last millisecond event, to detect the next one. */
    free_running_counter_last += (ms_counts * TIMER_COUNTS_PER_MS);
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	461a      	mov	r2, r3
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	0091      	lsls	r1, r2, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	460b      	mov	r3, r1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <TimerUpdate+0x68>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	b29a      	uxth	r2, r3
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <TimerUpdate+0x68>)
 80023e0:	801a      	strh	r2, [r3, #0]
  }
} /*** end of TimerUpdate ***/
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40010000 	.word	0x40010000
 80023f4:	20000524 	.word	0x20000524
 80023f8:	51eb851f 	.word	0x51eb851f
 80023fc:	20000520 	.word	0x20000520

08002400 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8002404:	f7ff ffc2 	bl	800238c <TimerUpdate>

  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <TimerGet+0x10>)
 800240a:	681b      	ldr	r3, [r3, #0]
} /*** end of TimerGet ***/
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000520 	.word	0x20000520

08002414 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8002418:	f7ff fff2 	bl	8002400 <TimerGet>
 800241c:	4603      	mov	r3, r0
} /*** end of HAL_GetTick ***/
 800241e:	4618      	mov	r0, r3
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <XcpInit>:
** \brief     Initializes the XCP driver. Should be called once upon system startup.
** \return    none
**
****************************************************************************************/
void XcpInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* reset xcp module info */
  xcpInfo.connected = 0;
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <XcpInit+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  xcpInfo.mta = 0;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <XcpInit+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  xcpInfo.ctoPending = 0;
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <XcpInit+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  xcpInfo.ctoLen = 0;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <XcpInit+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
  xcpInfo.s_n_k_resource = 0;
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <XcpInit+0x40>)
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  xcpInfo.protection = 0;
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <XcpInit+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
} /*** end of XcpInit ***/
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000528 	.word	0x20000528

08002468 <XcpIsConnected>:
** \brief     Obtains information about the XCP connection state.
** \return    BLT_TRUE is an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool XcpIsConnected(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  if (xcpInfo.connected == 0)
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <XcpIsConnected+0x20>)
 800246e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <XcpIsConnected+0x12>
  {
    return BLT_FALSE;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <XcpIsConnected+0x14>
  }
  return BLT_TRUE;
 800247a:	2301      	movs	r3, #1
} /*** end of XcpIsConnected ***/
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000528 	.word	0x20000528

0800248c <XcpPacketTransmitted>:
**            the transport layer.
** \return    none
**
****************************************************************************************/
void XcpPacketTransmitted(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* reset packet transmission pending flag */
  xcpInfo.ctoPending = 0;
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <XcpPacketTransmitted+0x18>)
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
} /*** end of XcpPacketTransmitted ***/
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000528 	.word	0x20000528

080024a8 <XcpPacketReceived>:
** \param     len Number of bytes in the packet.
** \return    none
**
****************************************************************************************/
void XcpPacketReceived(blt_int8u *data, blt_int8u len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
    /* packet processed by hook function so no need to continue. */
    return;
  }
#endif
  /* was this a connect command? */
  if (data[0] == XCP_CMD_CONNECT)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2bff      	cmp	r3, #255	; 0xff
 80024ba:	d103      	bne.n	80024c4 <XcpPacketReceived+0x1c>
  {
    /* process the connect command */
    XcpCmdConnect(data);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f979 	bl	80027b4 <XcpCmdConnect>
 80024c2:	e0b7      	b.n	8002634 <XcpPacketReceived+0x18c>
  }
  /* only continue if connected */
  else if (xcpInfo.connected == 1)
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <XcpPacketReceived+0x1c8>)
 80024c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	f040 80cb 	bne.w	8002666 <XcpPacketReceived+0x1be>
  {
    switch (data[0])
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	3bc9      	subs	r3, #201	; 0xc9
 80024d6:	2b35      	cmp	r3, #53	; 0x35
 80024d8:	f200 80a8 	bhi.w	800262c <XcpPacketReceived+0x184>
 80024dc:	a201      	add	r2, pc, #4	; (adr r2, 80024e4 <XcpPacketReceived+0x3c>)
 80024de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e2:	bf00      	nop
 80024e4:	080025fd 	.word	0x080025fd
 80024e8:	0800262d 	.word	0x0800262d
 80024ec:	0800262d 	.word	0x0800262d
 80024f0:	08002625 	.word	0x08002625
 80024f4:	0800262d 	.word	0x0800262d
 80024f8:	0800262d 	.word	0x0800262d
 80024fc:	0800261d 	.word	0x0800261d
 8002500:	08002605 	.word	0x08002605
 8002504:	08002615 	.word	0x08002615
 8002508:	0800260d 	.word	0x0800260d
 800250c:	0800262d 	.word	0x0800262d
 8002510:	0800262d 	.word	0x0800262d
 8002514:	0800262d 	.word	0x0800262d
 8002518:	0800262d 	.word	0x0800262d
 800251c:	0800262d 	.word	0x0800262d
 8002520:	0800262d 	.word	0x0800262d
 8002524:	0800262d 	.word	0x0800262d
 8002528:	0800262d 	.word	0x0800262d
 800252c:	0800262d 	.word	0x0800262d
 8002530:	0800262d 	.word	0x0800262d
 8002534:	0800262d 	.word	0x0800262d
 8002538:	0800262d 	.word	0x0800262d
 800253c:	0800262d 	.word	0x0800262d
 8002540:	0800262d 	.word	0x0800262d
 8002544:	0800262d 	.word	0x0800262d
 8002548:	0800262d 	.word	0x0800262d
 800254c:	0800262d 	.word	0x0800262d
 8002550:	0800262d 	.word	0x0800262d
 8002554:	0800262d 	.word	0x0800262d
 8002558:	0800262d 	.word	0x0800262d
 800255c:	0800262d 	.word	0x0800262d
 8002560:	0800262d 	.word	0x0800262d
 8002564:	0800262d 	.word	0x0800262d
 8002568:	0800262d 	.word	0x0800262d
 800256c:	0800262d 	.word	0x0800262d
 8002570:	0800262d 	.word	0x0800262d
 8002574:	0800262d 	.word	0x0800262d
 8002578:	0800262d 	.word	0x0800262d
 800257c:	0800262d 	.word	0x0800262d
 8002580:	0800262d 	.word	0x0800262d
 8002584:	0800262d 	.word	0x0800262d
 8002588:	0800262d 	.word	0x0800262d
 800258c:	080025d5 	.word	0x080025d5
 8002590:	080025c5 	.word	0x080025c5
 8002594:	080025bd 	.word	0x080025bd
 8002598:	080025cd 	.word	0x080025cd
 800259c:	0800262d 	.word	0x0800262d
 80025a0:	0800262d 	.word	0x0800262d
 80025a4:	0800262d 	.word	0x0800262d
 80025a8:	080025dd 	.word	0x080025dd
 80025ac:	0800262d 	.word	0x0800262d
 80025b0:	080025e5 	.word	0x080025e5
 80025b4:	080025ed 	.word	0x080025ed
 80025b8:	080025f5 	.word	0x080025f5
    {
      case XCP_CMD_UPLOAD:
        XcpCmdUpload(data);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f9c7 	bl	8002950 <XcpCmdUpload>
        break;
 80025c2:	e037      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_SHORT_UPLOAD:
        XcpCmdShortUpload(data);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fa01 	bl	80029cc <XcpCmdShortUpload>
        break;
 80025ca:	e033      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_SET_MTA:
        XcpCmdSetMta(data);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f9a5 	bl	800291c <XcpCmdSetMta>
        break;
 80025d2:	e02f      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_BUILD_CHECKSUM:
        XcpCmdBuildCheckSum(data);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa41 	bl	8002a5c <XcpCmdBuildCheckSum>
        break;
 80025da:	e02b      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_ID:
        XcpCmdGetId(data);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f975 	bl	80028cc <XcpCmdGetId>
        break;
 80025e2:	e027      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_SYNCH:
        XcpCmdSynch(data);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f965 	bl	80028b4 <XcpCmdSynch>
        break;
 80025ea:	e023      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_STATUS:
        XcpCmdGetStatus(data);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f93d 	bl	800286c <XcpCmdGetStatus>
        break;
 80025f2:	e01f      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_DISCONNECT:
        XcpCmdDisconnect(data);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f921 	bl	800283c <XcpCmdDisconnect>
        break;
 80025fa:	e01b      	b.n	8002634 <XcpPacketReceived+0x18c>
        XcpCmdDownloadMax(data);
        break;
#endif
#if (XCP_RES_PROGRAMMING_EN == 1)
      case XCP_CMD_PROGRAM_MAX:
        XcpCmdProgramMax(data);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fa87 	bl	8002b10 <XcpCmdProgramMax>
        break;
 8002602:	e017      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM:
        XcpCmdProgram(data);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fab3 	bl	8002b70 <XcpCmdProgram>
        break;
 800260a:	e013      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_START:
        XcpCmdProgramStart(data);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fa59 	bl	8002ac4 <XcpCmdProgramStart>
        break;
 8002612:	e00f      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_CLEAR:
        XcpCmdProgramClear(data);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 faf5 	bl	8002c04 <XcpCmdProgramClear>
        break;
 800261a:	e00b      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_RESET:
        XcpCmdProgramReset(data);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fb17 	bl	8002c50 <XcpCmdProgramReset>
        break;
 8002622:	e007      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_PROGRAM_PREPARE:
        XcpCmdProgramPrepare(data);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fb27 	bl	8002c78 <XcpCmdProgramPrepare>
        break;
 800262a:	e003      	b.n	8002634 <XcpPacketReceived+0x18c>
      case XCP_CMD_GET_CAL_PAGE:
        XcpCmdGetCalPage(data);
        break;
#endif
      default:
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 800262c:	2020      	movs	r0, #32
 800262e:	f000 f85f 	bl	80026f0 <XcpSetCtoError>
        break;
 8002632:	bf00      	nop
    /* return to make sure response packet is not send because we are not connected */
    return;
  }

  /* make sure the previous command was completed */
  if (xcpInfo.ctoPending == 1)
 8002634:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <XcpPacketReceived+0x1c8>)
 8002636:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <XcpPacketReceived+0x19c>
  {
    /* command overrun occurred */
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 800263e:	2010      	movs	r0, #16
 8002640:	f000 f856 	bl	80026f0 <XcpSetCtoError>
  }

  /* send the response if it contains something */
  if (xcpInfo.ctoLen > 0)
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <XcpPacketReceived+0x1c8>)
 8002646:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800264a:	2b00      	cmp	r3, #0
 800264c:	dd0c      	ble.n	8002668 <XcpPacketReceived+0x1c0>
  {
    /* set cto packet transmission pending flag */
    xcpInfo.ctoPending = 1;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <XcpPacketReceived+0x1c8>)
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* transmit the cto response packet */
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <XcpPacketReceived+0x1c8>)
 8002658:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800265c:	4619      	mov	r1, r3
 800265e:	4804      	ldr	r0, [pc, #16]	; (8002670 <XcpPacketReceived+0x1c8>)
 8002660:	f000 f808 	bl	8002674 <XcpTransmitPacket>
 8002664:	e000      	b.n	8002668 <XcpPacketReceived+0x1c0>
    return;
 8002666:	bf00      	nop
  }
} /*** end of XcpPacketReceived ***/
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000528 	.word	0x20000528

08002674 <XcpTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
static void XcpTransmitPacket(blt_int8u *data, blt_int16s len)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  /* submit packet to the communication interface for transmission */
#if (BOOT_COM_ENABLE == 0)
  XcpTransmitPacketHook(data, len);
#else
  ComTransmitPacket(data, len);
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7fd ffcd 	bl	8000624 <ComTransmitPacket>
#endif

} /*** end of XcpTransmitPacket ***/
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <XcpComputeChecksum>:
** \return    Checksum type that was used during the checksum calculation.
**
****************************************************************************************/
static blt_int8u XcpComputeChecksum(blt_int32u address, blt_int32u length,
                                    blt_int32u *checksum)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
  blt_int8u cs = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]

  /* this example computes the checksum using the add byte to byte algorithm */
  while (length-- > 0)
 80026a2:	e009      	b.n	80026b8 <XcpComputeChecksum+0x26>
  {
    /* add the next byte value */
    cs += *((blt_int8u *)(blt_addr)address);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	781a      	ldrb	r2, [r3, #0]
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	4413      	add	r3, r2
 80026ac:	75fb      	strb	r3, [r7, #23]
    /* increment address */
    address++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3301      	adds	r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
    /* service the watchdog */
    CopService();
 80026b4:	f7fe f84b 	bl	800074e <CopService>
  while (length-- > 0)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	60ba      	str	r2, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <XcpComputeChecksum+0x12>
  }
  /* store the computed checksum value */
  *checksum = cs;
 80026c2:	7dfa      	ldrb	r2, [r7, #23]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
  /* inform the caller of the uses checksum computation algorithm */
  return XCP_CS_ADD11;
 80026c8:	2301      	movs	r3, #1
} /*** end of XcpComputeChecksum ***/
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <XcpProtectResources>:
** \brief     Utility function to protects all the available resources.
** \return    none
**
****************************************************************************************/
static void XcpProtectResources(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  xcpInfo.protection = 0;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <XcpProtectResources+0x18>)
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000528 	.word	0x20000528

080026f0 <XcpSetCtoError>:
** \param     error XCP error code (XCP_ERR_XXX).
** \return    none
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <XcpSetCtoError+0x2c>)
 80026fc:	22fe      	movs	r2, #254	; 0xfe
 80026fe:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoData[1] = error;
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <XcpSetCtoError+0x2c>)
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	7053      	strb	r3, [r2, #1]
  xcpInfo.ctoLen = 2;
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <XcpSetCtoError+0x2c>)
 8002708:	2202      	movs	r2, #2
 800270a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpSetCtoError ***/
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000528 	.word	0x20000528

08002720 <XcpGetOrderedLong>:
** \param     data Array to the buffer with the 32-bit value stored as bytes.
** \return    The 32-bit value.
**
****************************************************************************************/
static blt_int32u XcpGetOrderedLong(blt_int8u const * data)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  blt_int32u result = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]

#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  result |= (blt_int32u)data[0];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[1] << 8);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3301      	adds	r3, #1
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 16);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3302      	adds	r3, #2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[3] << 24);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3303      	adds	r3, #3
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  result |= (blt_int32u)((blt_int32u)data[2] << 8);
  result |= (blt_int32u)((blt_int32u)data[1] << 16);
  result |= (blt_int32u)((blt_int32u)data[0] << 24);
#endif
  /* Give the result back to the caller. */
  return result;
 8002762:	68fb      	ldr	r3, [r7, #12]
} /*** end of XcpGetOrderedLong ***/
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <XcpSetOrderedLong>:
** \param     value The 32-bit value to store in the buffer.
** \param     data Array to the buffer for storage.
**
****************************************************************************************/
static void XcpSetOrderedLong(blt_int32u value, blt_int8u *data)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
#if (BOOT_CPU_BYTE_ORDER_MOTOROLA	== 0)
  data[0] = (blt_int8u) value;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	701a      	strb	r2, [r3, #0]
  data[1] = (blt_int8u)(value >>  8);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	0a1a      	lsrs	r2, r3, #8
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	3301      	adds	r3, #1
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
  data[2] = (blt_int8u)(value >> 16);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0c1a      	lsrs	r2, r3, #16
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	3302      	adds	r3, #2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u)(value >> 24);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0e1a      	lsrs	r2, r3, #24
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	3303      	adds	r3, #3
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
  data[3] = (blt_int8u) value;
  data[2] = (blt_int8u)(value >>  8);
  data[1] = (blt_int8u)(value >> 16);
  data[0] = (blt_int8u)(value >> 24);
#endif
} /*** end of XcpSetOrderedLong ***/
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <XcpCmdConnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdConnect(blt_int8u *data)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* enable resource protection */
  XcpProtectResources();
 80027bc:	f7ff ff8a 	bl	80026d4 <XcpProtectResources>

  /* indicate that the connection is established */
  xcpInfo.connected = 1;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <XcpCmdConnect+0x84>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <XcpCmdConnect+0x84>)
 80027ca:	22ff      	movs	r2, #255	; 0xff
 80027cc:	701a      	strb	r2, [r3, #0]

  /* report available resources */
  xcpInfo.ctoData[1] = 0;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <XcpCmdConnect+0x84>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <XcpCmdConnect+0x84>)
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b16      	ldr	r3, [pc, #88]	; (8002838 <XcpCmdConnect+0x84>)
 80027e0:	705a      	strb	r2, [r3, #1]
#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.ctoData[1] |= XCP_RES_STIM;
#endif

  /* report communication mode info. only byte granularity is supported */
  xcpInfo.ctoData[2] = 0;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <XcpCmdConnect+0x84>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	709a      	strb	r2, [r3, #2]
  /* configure for motorola or intel byte ordering */
  xcpInfo.ctoData[2] |= XCP_MOTOROLA_FORMAT;
 80027e8:	4b13      	ldr	r3, [pc, #76]	; (8002838 <XcpCmdConnect+0x84>)
 80027ea:	789a      	ldrb	r2, [r3, #2]
 80027ec:	4b12      	ldr	r3, [pc, #72]	; (8002838 <XcpCmdConnect+0x84>)
 80027ee:	709a      	strb	r2, [r3, #2]

  /* report max cto data length */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 80027f0:	f7fd ff30 	bl	8000654 <ComGetActiveInterfaceMaxRxLen>
 80027f4:	4603      	mov	r3, r0
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <XcpCmdConnect+0x84>)
 80027fa:	70da      	strb	r2, [r3, #3]

  /* report max dto data length */
#if (XCP_MOTOROLA_FORMAT == 0)
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 80027fc:	f7fd ff5a 	bl	80006b4 <ComGetActiveInterfaceMaxTxLen>
 8002800:	4603      	mov	r3, r0
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <XcpCmdConnect+0x84>)
 8002806:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8002808:	f7fd ff54 	bl	80006b4 <ComGetActiveInterfaceMaxTxLen>
 800280c:	4603      	mov	r3, r0
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	b29b      	uxth	r3, r3
 8002812:	b2da      	uxtb	r2, r3
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <XcpCmdConnect+0x84>)
 8002816:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[4] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
  xcpInfo.ctoData[5] = (blt_int8u)XCP_DTO_PACKET_LEN;
#endif

  /* report msb of protocol layer version number */
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8002818:	4b07      	ldr	r3, [pc, #28]	; (8002838 <XcpCmdConnect+0x84>)
 800281a:	2201      	movs	r2, #1
 800281c:	719a      	strb	r2, [r3, #6]

  /* report msb of transport layer version number */
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <XcpCmdConnect+0x84>)
 8002820:	2201      	movs	r2, #1
 8002822:	71da      	strb	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <XcpCmdConnect+0x84>)
 8002826:	2208      	movs	r2, #8
 8002828:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* reinit the NVM driver because a new firmware update is about the start */
  NvmInit();
 800282c:	f7ff fb49 	bl	8001ec2 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000528 	.word	0x20000528

0800283c <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <XcpCmdDisconnect+0x2c>)
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* enable resource protection */
  XcpProtectResources();
 800284c:	f7ff ff42 	bl	80026d4 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <XcpCmdDisconnect+0x2c>)
 8002852:	22ff      	movs	r2, #255	; 0xff
 8002854:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <XcpCmdDisconnect+0x2c>)
 8002858:	2201      	movs	r2, #1
 800285a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdDisconnect ***/
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000528 	.word	0x20000528

0800286c <XcpCmdGetStatus>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetStatus(blt_int8u *data)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <XcpCmdGetStatus+0x44>)
 8002876:	22ff      	movs	r2, #255	; 0xff
 8002878:	701a      	strb	r2, [r3, #0]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <XcpCmdGetStatus+0x44>)
 800287c:	2200      	movs	r2, #0
 800287e:	705a      	strb	r2, [r3, #1]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <XcpCmdGetStatus+0x44>)
 8002882:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <XcpCmdGetStatus+0x44>)
 8002888:	709a      	strb	r2, [r3, #2]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <XcpCmdGetStatus+0x44>)
 800288c:	2200      	movs	r2, #0
 800288e:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[4] = 0;
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <XcpCmdGetStatus+0x44>)
 8002892:	2200      	movs	r2, #0
 8002894:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <XcpCmdGetStatus+0x44>)
 8002898:	2200      	movs	r2, #0
 800289a:	715a      	strb	r2, [r3, #5]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <XcpCmdGetStatus+0x44>)
 800289e:	2206      	movs	r2, #6
 80028a0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetStatus ***/
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	20000528 	.word	0x20000528

080028b4 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff ff17 	bl	80026f0 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <XcpCmdGetId>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdGetId(blt_int8u *data)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <XcpCmdGetId+0x44>)
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	701a      	strb	r2, [r3, #0]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 80028da:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <XcpCmdGetId+0x48>)
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <XcpCmdGetId+0x44>)
 80028de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <XcpCmdGetId+0x44>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	705a      	strb	r2, [r3, #1]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <XcpCmdGetId+0x44>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <XcpCmdGetId+0x44>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	70da      	strb	r2, [r3, #3]

  /* store station id length (excl. null termination) for response packet */
  stationIdLen = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 80028f4:	2307      	movs	r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]
  XcpSetOrderedLong(stationIdLen, &xcpInfo.ctoData[4]);
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <XcpCmdGetId+0x4c>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff ff38 	bl	8002770 <XcpSetOrderedLong>

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <XcpCmdGetId+0x44>)
 8002902:	2208      	movs	r2, #8
 8002904:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdGetId ***/
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000528 	.word	0x20000528
 8002914:	08005774 	.word	0x08005774
 8002918:	2000052c 	.word	0x2000052c

0800291c <XcpCmdSetMta>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <XcpCmdSetMta+0x30>)
 8002926:	22ff      	movs	r2, #255	; 0xff
 8002928:	701a      	strb	r2, [r3, #0]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fef6 	bl	8002720 <XcpGetOrderedLong>
 8002934:	4603      	mov	r3, r0
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <XcpCmdSetMta+0x30>)
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <XcpCmdSetMta+0x30>)
 800293e:	2201      	movs	r2, #1
 8002940:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdSetMta ***/
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000528 	.word	0x20000528

08002950 <XcpCmdUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdUpload(blt_int8u *data)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8002958:	f7fd fe7c 	bl	8000654 <ComGetActiveInterfaceMaxRxLen>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3301      	adds	r3, #1
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	429a      	cmp	r2, r3
 800296a:	d803      	bhi.n	8002974 <XcpCmdUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800296c:	2022      	movs	r0, #34	; 0x22
 800296e:	f7ff febf 	bl	80026f0 <XcpSetCtoError>
    return;
 8002972:	e024      	b.n	80029be <XcpCmdUpload+0x6e>
  }

  /* read out the length of the requested upload operation */
  len = data[1];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3301      	adds	r3, #1
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <XcpCmdUpload+0x74>)
 800297e:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <XcpCmdUpload+0x78>)
 8002984:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002988:	89fa      	ldrh	r2, [r7, #14]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd ff18 	bl	80007c0 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002990:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <XcpCmdUpload+0x78>)
 8002992:	22ff      	movs	r2, #255	; 0xff
 8002994:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <XcpCmdUpload+0x78>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	3201      	adds	r2, #1
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <XcpCmdUpload+0x78>)
 80029a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3301      	adds	r3, #1
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <XcpCmdUpload+0x78>)
 80029ba:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdUpload ***/
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000529 	.word	0x20000529
 80029c8:	20000528 	.word	0x20000528

080029cc <XcpCmdShortUpload>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdShortUpload(blt_int8u *data)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  blt_int16u len;
  blt_int8u *destPtr;

  /* validate length of upload request */
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80029d4:	f7fd fe3e 	bl	8000654 <ComGetActiveInterfaceMaxRxLen>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3301      	adds	r3, #1
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d803      	bhi.n	80029f0 <XcpCmdShortUpload+0x24>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80029e8:	2022      	movs	r0, #34	; 0x22
 80029ea:	f7ff fe81 	bl	80026f0 <XcpSetCtoError>
    return;
 80029ee:	e02d      	b.n	8002a4c <XcpCmdShortUpload+0x80>
  }

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = XcpGetOrderedLong(&data[4]);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fe93 	bl	8002720 <XcpGetOrderedLong>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <XcpCmdShortUpload+0x88>)
 80029fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* read out the length of the requested upload operation */
  len = data[1];
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3301      	adds	r3, #1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	81fb      	strh	r3, [r7, #14]
  /* set the destination pointer */
  destPtr = (blt_int8u *)((blt_addr)(blt_int32u)&xcpInfo.ctoData[1]);
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <XcpCmdShortUpload+0x8c>)
 8002a0c:	60bb      	str	r3, [r7, #8]
    /* copy the data from memory to the data packet */
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
  }
  #else
  /* copy the data from memory to the data packet */
  CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <XcpCmdShortUpload+0x88>)
 8002a12:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8002a16:	89fa      	ldrh	r2, [r7, #14]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fed1 	bl	80007c0 <CpuMemCopy>
  /* uploads are disabled, so return zero values for memory read operations */
  CpuMemSet((blt_addr)destPtr, 0, len);
#endif /* XCP_UPLOAD_EN == 1 */

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <XcpCmdShortUpload+0x88>)
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <XcpCmdShortUpload+0x88>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	3201      	adds	r2, #1
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a08      	ldr	r2, [pc, #32]	; (8002a54 <XcpCmdShortUpload+0x88>)
 8002a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = data[1]+1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b21a      	sxth	r2, r3
 8002a46:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <XcpCmdShortUpload+0x88>)
 8002a48:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdShortUpload ***/
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000528 	.word	0x20000528
 8002a58:	20000529 	.word	0x20000529

08002a5c <XcpCmdBuildCheckSum>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdBuildCheckSum(blt_int8u *data)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  blt_int32u checksumLen;
  blt_int32u checksumVal = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  blt_int8u  checksumType;
  
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <XcpCmdBuildCheckSum+0x60>)
 8002a6a:	22ff      	movs	r2, #255	; 0xff
 8002a6c:	701a      	strb	r2, [r3, #0]

  /* obtain checksum and checksum type */
  checksumLen = XcpGetOrderedLong(&data[4]);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fe54 	bl	8002720 <XcpGetOrderedLong>
 8002a78:	6178      	str	r0, [r7, #20]
  checksumType = XcpComputeChecksum(xcpInfo.mta, checksumLen, &checksumVal);
 8002a7a:	4b10      	ldr	r3, [pc, #64]	; (8002abc <XcpCmdBuildCheckSum+0x60>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f107 020c 	add.w	r2, r7, #12
 8002a84:	6979      	ldr	r1, [r7, #20]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fe03 	bl	8002692 <XcpComputeChecksum>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	74fb      	strb	r3, [r7, #19]
  xcpInfo.ctoData[1] = checksumType;
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <XcpCmdBuildCheckSum+0x60>)
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	7053      	strb	r3, [r2, #1]
  XcpSetOrderedLong(checksumVal, &xcpInfo.ctoData[4]);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4909      	ldr	r1, [pc, #36]	; (8002ac0 <XcpCmdBuildCheckSum+0x64>)
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fe68 	bl	8002770 <XcpSetOrderedLong>

  /* initialize reserved parameters */
  xcpInfo.ctoData[2] = 0;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <XcpCmdBuildCheckSum+0x60>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	709a      	strb	r2, [r3, #2]
  xcpInfo.ctoData[3] = 0;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <XcpCmdBuildCheckSum+0x60>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	70da      	strb	r2, [r3, #3]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <XcpCmdBuildCheckSum+0x60>)
 8002aae:	2208      	movs	r2, #8
 8002ab0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdBuildCheckSum ***/
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000528 	.word	0x20000528
 8002ac0:	2000052c 	.word	0x2000052c

08002ac4 <XcpCmdProgramStart>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramStart(blt_int8u *data)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002ace:	22ff      	movs	r2, #255	; 0xff
 8002ad0:	701a      	strb	r2, [r3, #0]

  /* initialize reserved parameter */
  xcpInfo.ctoData[1] = 0;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	705a      	strb	r2, [r3, #1]

  /* no special communication mode supported during programming */
  xcpInfo.ctoData[2] = 0;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	709a      	strb	r2, [r3, #2]

  /* cto packet length stays the same during programming */
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8002ade:	f7fd fdb9 	bl	8000654 <ComGetActiveInterfaceMaxRxLen>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002ae8:	70da      	strb	r2, [r3, #3]

  /* no block size, st-min time, or queue size supported */
  xcpInfo.ctoData[4] = 0;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoData[5] = 0;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[6] = 0;
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	719a      	strb	r2, [r3, #6]

  /* set packet length */
  xcpInfo.ctoLen = 7;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <XcpCmdProgramStart+0x48>)
 8002afe:	2207      	movs	r2, #7
 8002b00:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramStart ***/
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000528 	.word	0x20000528

08002b10 <XcpCmdProgramMax>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramMax(blt_int8u *data)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <XcpCmdProgramMax+0x5c>)
 8002b1a:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8002b1e:	f7fd fd99 	bl	8000654 <ComGetActiveInterfaceMaxRxLen>
 8002b22:	4603      	mov	r3, r0
 8002b24:	3b01      	subs	r3, #1
 8002b26:	4619      	mov	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff f9cd 	bl	8001ece <NvmWrite>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <XcpCmdProgramMax+0x32>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8002b3a:	2031      	movs	r0, #49	; 0x31
 8002b3c:	f7ff fdd8 	bl	80026f0 <XcpSetCtoError>
    return;
 8002b40:	e011      	b.n	8002b66 <XcpCmdProgramMax+0x56>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <XcpCmdProgramMax+0x5c>)
 8002b44:	22ff      	movs	r2, #255	; 0xff
 8002b46:	701a      	strb	r2, [r3, #0]

  /* post increment the mta */
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8002b48:	f7fd fd84 	bl	8000654 <ComGetActiveInterfaceMaxRxLen>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <XcpCmdProgramMax+0x5c>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	4413      	add	r3, r2
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <XcpCmdProgramMax+0x5c>)
 8002b5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8002b5e:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <XcpCmdProgramMax+0x5c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramMax ***/
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd90      	pop	{r4, r7, pc}
 8002b6c:	20000528 	.word	0x20000528

08002b70 <XcpCmdProgram>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgram(blt_int8u *data)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* validate length of download request */
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8002b78:	f7fd fd6c 	bl	8000654 <ComGetActiveInterfaceMaxRxLen>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	3201      	adds	r2, #1
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	dc03      	bgt.n	8002b92 <XcpCmdProgram+0x22>
  {
    /* requested data length is too long */
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8002b8a:	2022      	movs	r0, #34	; 0x22
 8002b8c:	f7ff fdb0 	bl	80026f0 <XcpSetCtoError>
    return;
 8002b90:	e033      	b.n	8002bfa <XcpCmdProgram+0x8a>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <XcpCmdProgram+0x90>)
 8002b94:	22ff      	movs	r2, #255	; 0xff
 8002b96:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <XcpCmdProgram+0x90>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

  /* end of programming sequence (datasize is 0)? */
  if (data[1] == 0)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <XcpCmdProgram+0x4c>
  {
    /* call erase/programming cleanup routine */
    if (NvmDone() == BLT_FALSE)
 8002baa:	f7ff f9bc 	bl	8001f26 <NvmDone>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d121      	bne.n	8002bf8 <XcpCmdProgram+0x88>
    {
      /* error occurred while finishing up programming */
      XcpSetCtoError(XCP_ERR_GENERIC);
 8002bb4:	2031      	movs	r0, #49	; 0x31
 8002bb6:	f7ff fd9b 	bl	80026f0 <XcpSetCtoError>
    }
    return;
 8002bba:	e01d      	b.n	8002bf8 <XcpCmdProgram+0x88>
  }
  /* program the data */
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <XcpCmdProgram+0x90>)
 8002bbe:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3302      	adds	r3, #2
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f7ff f97d 	bl	8001ece <NvmWrite>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <XcpCmdProgram+0x72>
  {
    /* error occurred during programming */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8002bda:	2031      	movs	r0, #49	; 0x31
 8002bdc:	f7ff fd88 	bl	80026f0 <XcpSetCtoError>
    return;
 8002be0:	e00b      	b.n	8002bfa <XcpCmdProgram+0x8a>
  }

  /* post increment the mta */
  xcpInfo.mta += data[1];
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <XcpCmdProgram+0x90>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	3201      	adds	r2, #1
 8002bec:	7812      	ldrb	r2, [r2, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <XcpCmdProgram+0x90>)
 8002bf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002bf6:	e000      	b.n	8002bfa <XcpCmdProgram+0x8a>
    return;
 8002bf8:	bf00      	nop
} /*** end of XcpCmdProgram ***/
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000528 	.word	0x20000528

08002c04 <XcpCmdProgramClear>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramClear(blt_int8u *data)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* erase the memory */
  eraseAddr = xcpInfo.mta;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <XcpCmdProgramClear+0x48>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	60fb      	str	r3, [r7, #12]
  eraseLen = XcpGetOrderedLong(&data[4]);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fd81 	bl	8002720 <XcpGetOrderedLong>
 8002c1e:	60b8      	str	r0, [r7, #8]
  if (NvmErase(eraseAddr, eraseLen) == BLT_FALSE)
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f7ff f963 	bl	8001eee <NvmErase>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <XcpCmdProgramClear+0x32>
  {
    /* error occurred during erasure */
    XcpSetCtoError(XCP_ERR_GENERIC);
 8002c2e:	2031      	movs	r0, #49	; 0x31
 8002c30:	f7ff fd5e 	bl	80026f0 <XcpSetCtoError>
    return;
 8002c34:	e006      	b.n	8002c44 <XcpCmdProgramClear+0x40>
  }

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <XcpCmdProgramClear+0x48>)
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <XcpCmdProgramClear+0x48>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramClear ***/
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000528 	.word	0x20000528

08002c50 <XcpCmdProgramReset>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramReset(blt_int8u *data)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
#endif

  /* reset the ecu after programming is done. so basically, just start the newly programmed
   * firmware. it is okay if the code does not return here. 
   */
  CpuStartUserProgram();
 8002c58:	f7fd fd86 	bl	8000768 <CpuStartUserProgram>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <XcpCmdProgramReset+0x24>)
 8002c5e:	22ff      	movs	r2, #255	; 0xff
 8002c60:	701a      	strb	r2, [r3, #0]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <XcpCmdProgramReset+0x24>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
} /*** end of XcpCmdProgramReset ***/
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000528 	.word	0x20000528

08002c78 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8002c80:	2031      	movs	r0, #49	; 0x31
 8002c82:	f7ff fd35 	bl	80026f0 <XcpSetCtoError>
  return;
 8002c86:	bf00      	nop
} /*** end of XcpCmdProgramPrepare ***/
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c94:	480d      	ldr	r0, [pc, #52]	; (8002ccc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c96:	490e      	ldr	r1, [pc, #56]	; (8002cd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c98:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c9c:	e002      	b.n	8002ca4 <LoopCopyDataInit>

08002c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ca2:	3304      	adds	r3, #4

08002ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca8:	d3f9      	bcc.n	8002c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cac:	4c0b      	ldr	r4, [pc, #44]	; (8002cdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb0:	e001      	b.n	8002cb6 <LoopFillZerobss>

08002cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cb4:	3204      	adds	r2, #4

08002cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb8:	d3fb      	bcc.n	8002cb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cba:	f7ff fa87 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cbe:	f002 fc5f 	bl	8005580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cc2:	f7fe fe3c 	bl	800193e <main>
  bx  lr    
 8002cc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002cd4:	08005784 	.word	0x08005784
  ldr r2, =_sbss
 8002cd8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002cdc:	200005d8 	.word	0x200005d8

08002ce0 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ce0:	e7fe      	b.n	8002ce0 <CAN2_RX0_IRQHandler>
	...

08002ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_Init+0x40>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	; (8002d24 <HAL_Init+0x40>)
 8002cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_Init+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <HAL_Init+0x40>)
 8002cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <HAL_Init+0x40>)
 8002d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f000 ffbd 	bl	8003c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d12:	200f      	movs	r0, #15
 8002d14:	f000 f83c 	bl	8002d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d18:	f7ff f914 	bl	8001f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023c00 	.word	0x40023c00

08002d28 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <HAL_DeInit+0x54>)
 8002d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d32:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_DeInit+0x54>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <HAL_DeInit+0x54>)
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_DeInit+0x54>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <HAL_DeInit+0x54>)
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_DeInit+0x54>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_DeInit+0x54>)
 8002d58:	f04f 32ff 	mov.w	r2, #4294967295
 8002d5c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_DeInit+0x54>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_DeInit+0x54>)
 8002d66:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_DeInit+0x54>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002d72:	f000 f805 	bl	8002d80 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800

08002d80 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_InitTick+0x54>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_InitTick+0x58>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 ffa1 	bl	8003cf6 <HAL_SYSTICK_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00e      	b.n	8002ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b0f      	cmp	r3, #15
 8002dc2:	d80a      	bhi.n	8002dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f000 ff69 	bl	8003ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <HAL_InitTick+0x5c>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000004 	.word	0x20000004
 8002de8:	2000000c 	.word	0x2000000c
 8002dec:	20000008 	.word	0x20000008

08002df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_IncTick+0x20>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_IncTick+0x24>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_IncTick+0x24>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	2000000c 	.word	0x2000000c
 8002e14:	200005b4 	.word	0x200005b4

08002e18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0ed      	b.n	8003006 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff f8b2 	bl	8001fa0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4c:	f7ff fae2 	bl	8002414 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e52:	e012      	b.n	8002e7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e54:	f7ff fade 	bl	8002414 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b0a      	cmp	r3, #10
 8002e60:	d90b      	bls.n	8002e7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2205      	movs	r2, #5
 8002e72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0c5      	b.n	8003006 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0e5      	beq.n	8002e54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0202 	bic.w	r2, r2, #2
 8002e96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e98:	f7ff fabc 	bl	8002414 <HAL_GetTick>
 8002e9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e9e:	e012      	b.n	8002ec6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ea0:	f7ff fab8 	bl	8002414 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b0a      	cmp	r3, #10
 8002eac:	d90b      	bls.n	8002ec6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2205      	movs	r2, #5
 8002ebe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e09f      	b.n	8003006 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e5      	bne.n	8002ea0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7e1b      	ldrb	r3, [r3, #24]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d108      	bne.n	8002eee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e007      	b.n	8002efe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7e5b      	ldrb	r3, [r3, #25]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e007      	b.n	8002f28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7e9b      	ldrb	r3, [r3, #26]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d108      	bne.n	8002f42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0220 	orr.w	r2, r2, #32
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	e007      	b.n	8002f52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0220 	bic.w	r2, r2, #32
 8002f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	7edb      	ldrb	r3, [r3, #27]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d108      	bne.n	8002f6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0210 	bic.w	r2, r2, #16
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e007      	b.n	8002f7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0210 	orr.w	r2, r2, #16
 8002f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7f1b      	ldrb	r3, [r3, #28]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0208 	orr.w	r2, r2, #8
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e007      	b.n	8002fa6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0208 	bic.w	r2, r2, #8
 8002fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	7f5b      	ldrb	r3, [r3, #29]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0204 	orr.w	r2, r2, #4
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	e007      	b.n	8002fd0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0204 	bic.w	r2, r2, #4
 8002fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	ea42 0103 	orr.w	r1, r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003026:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d003      	beq.n	8003036 <HAL_CAN_ConfigFilter+0x26>
 800302e:	7cfb      	ldrb	r3, [r7, #19]
 8003030:	2b02      	cmp	r3, #2
 8003032:	f040 80be 	bne.w	80031b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003036:	4b65      	ldr	r3, [pc, #404]	; (80031cc <HAL_CAN_ConfigFilter+0x1bc>)
 8003038:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003050:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	431a      	orrs	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2201      	movs	r2, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43db      	mvns	r3, r3
 8003088:	401a      	ands	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d123      	bne.n	80030e0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3248      	adds	r2, #72	; 0x48
 80030c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030d6:	6979      	ldr	r1, [r7, #20]
 80030d8:	3348      	adds	r3, #72	; 0x48
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d122      	bne.n	800312e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003108:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	3248      	adds	r2, #72	; 0x48
 800310e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003122:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003124:	6979      	ldr	r1, [r7, #20]
 8003126:	3348      	adds	r3, #72	; 0x48
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	440b      	add	r3, r1
 800312c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43db      	mvns	r3, r3
 8003140:	401a      	ands	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003148:	e007      	b.n	800315a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	431a      	orrs	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43db      	mvns	r3, r3
 800316c:	401a      	ands	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003174:	e007      	b.n	8003186 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	431a      	orrs	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	431a      	orrs	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031a4:	f023 0201 	bic.w	r2, r3, #1
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e006      	b.n	80031c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40006400 	.word	0x40006400

080031d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d12e      	bne.n	8003242 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031fc:	f7ff f90a 	bl	8002414 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003202:	e012      	b.n	800322a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003204:	f7ff f906 	bl	8002414 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b0a      	cmp	r3, #10
 8003210:	d90b      	bls.n	800322a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e012      	b.n	8003250 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e5      	bne.n	8003204 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e006      	b.n	8003250 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800326c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003276:	7ffb      	ldrb	r3, [r7, #31]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d003      	beq.n	8003284 <HAL_CAN_AddTxMessage+0x2c>
 800327c:	7ffb      	ldrb	r3, [r7, #31]
 800327e:	2b02      	cmp	r3, #2
 8003280:	f040 80b8 	bne.w	80033f4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 80a0 	beq.w	80033e4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	0e1b      	lsrs	r3, r3, #24
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d907      	bls.n	80032c4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e09e      	b.n	8003402 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032c4:	2201      	movs	r2, #1
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	409a      	lsls	r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032e0:	68f9      	ldr	r1, [r7, #12]
 80032e2:	6809      	ldr	r1, [r1, #0]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3318      	adds	r3, #24
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	440b      	add	r3, r1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e00f      	b.n	8003312 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032fc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003306:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3318      	adds	r3, #24
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	440b      	add	r3, r1
 8003310:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6819      	ldr	r1, [r3, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3318      	adds	r3, #24
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	440b      	add	r3, r1
 8003322:	3304      	adds	r3, #4
 8003324:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	7d1b      	ldrb	r3, [r3, #20]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d111      	bne.n	8003352 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3318      	adds	r3, #24
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4413      	add	r3, r2
 800333a:	3304      	adds	r3, #4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	6811      	ldr	r1, [r2, #0]
 8003342:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3318      	adds	r3, #24
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	440b      	add	r3, r1
 800334e:	3304      	adds	r3, #4
 8003350:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3307      	adds	r3, #7
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	061a      	lsls	r2, r3, #24
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3306      	adds	r3, #6
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3305      	adds	r3, #5
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	4313      	orrs	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	3204      	adds	r2, #4
 8003372:	7812      	ldrb	r2, [r2, #0]
 8003374:	4610      	mov	r0, r2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6811      	ldr	r1, [r2, #0]
 800337a:	ea43 0200 	orr.w	r2, r3, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	440b      	add	r3, r1
 8003384:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003388:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3303      	adds	r3, #3
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	061a      	lsls	r2, r3, #24
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3302      	adds	r3, #2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3301      	adds	r3, #1
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	4313      	orrs	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	4610      	mov	r0, r2
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	6811      	ldr	r1, [r2, #0]
 80033b0:	ea43 0200 	orr.w	r2, r3, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	440b      	add	r3, r1
 80033ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	3318      	adds	r3, #24
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4413      	add	r3, r2
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	6811      	ldr	r1, [r2, #0]
 80033d2:	f043 0201 	orr.w	r2, r3, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3318      	adds	r3, #24
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	440b      	add	r3, r1
 80033de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e00e      	b.n	8003402 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e006      	b.n	8003402 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
  }
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800340e:	b480      	push	{r7}
 8003410:	b085      	sub	sp, #20
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003422:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003424:	7afb      	ldrb	r3, [r7, #11]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d002      	beq.n	8003430 <HAL_CAN_IsTxMessagePending+0x22>
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d10b      	bne.n	8003448 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	069b      	lsls	r3, r3, #26
 800343a:	401a      	ands	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	069b      	lsls	r3, r3, #26
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003444:	2301      	movs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003448:	68fb      	ldr	r3, [r7, #12]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003456:	b480      	push	{r7}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3020 	ldrb.w	r3, [r3, #32]
 800346a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d003      	beq.n	800347a <HAL_CAN_GetRxMessage+0x24>
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b02      	cmp	r3, #2
 8003476:	f040 80f3 	bne.w	8003660 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10e      	bne.n	800349e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e0e7      	b.n	800366e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0d8      	b.n	800366e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	331b      	adds	r3, #27
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	4413      	add	r3, r2
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0204 	and.w	r2, r3, #4
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	331b      	adds	r3, #27
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	4413      	add	r3, r2
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0d5b      	lsrs	r3, r3, #21
 80034ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e00b      	b.n	800350c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	331b      	adds	r3, #27
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	08db      	lsrs	r3, r3, #3
 8003504:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	331b      	adds	r3, #27
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	4413      	add	r3, r2
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0202 	and.w	r2, r3, #2
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	331b      	adds	r3, #27
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	4413      	add	r3, r2
 800352e:	3304      	adds	r3, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	331b      	adds	r3, #27
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	4413      	add	r3, r2
 8003546:	3304      	adds	r3, #4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0a1b      	lsrs	r3, r3, #8
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	331b      	adds	r3, #27
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	4413      	add	r3, r2
 8003574:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4413      	add	r3, r2
 800358a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0a1a      	lsrs	r2, r3, #8
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0c1a      	lsrs	r2, r3, #16
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	3302      	adds	r3, #2
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0e1a      	lsrs	r2, r3, #24
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	3303      	adds	r3, #3
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	3304      	adds	r3, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	0a1a      	lsrs	r2, r3, #8
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	3305      	adds	r3, #5
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	4413      	add	r3, r2
 800360a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0c1a      	lsrs	r2, r3, #16
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3306      	adds	r3, #6
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e1a      	lsrs	r2, r3, #24
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3307      	adds	r3, #7
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0220 	orr.w	r2, r2, #32
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	e007      	b.n	800365c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	e006      	b.n	800366e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08a      	sub	sp, #40	; 0x28
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d07c      	beq.n	80037ba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d023      	beq.n	8003712 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2201      	movs	r2, #1
 80036d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f983 	bl	80039e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80036e2:	e016      	b.n	8003712 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	e00c      	b.n	8003712 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	e002      	b.n	8003712 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f989 	bl	8003a24 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d024      	beq.n	8003766 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003724:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f963 	bl	80039fc <HAL_CAN_TxMailbox1CompleteCallback>
 8003736:	e016      	b.n	8003766 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	e00c      	b.n	8003766 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	e002      	b.n	8003766 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f969 	bl	8003a38 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d024      	beq.n	80037ba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003778:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f943 	bl	8003a10 <HAL_CAN_TxMailbox2CompleteCallback>
 800378a:	e016      	b.n	80037ba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e00c      	b.n	80037ba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d004      	beq.n	80037b4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	e002      	b.n	80037ba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f949 	bl	8003a4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00c      	beq.n	80037de <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2210      	movs	r2, #16
 80037dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2208      	movs	r2, #8
 80037f8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f93a 	bl	8003a74 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f921 	bl	8003a60 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00c      	beq.n	8003842 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003838:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2210      	movs	r2, #16
 8003840:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2208      	movs	r2, #8
 800385c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f91c 	bl	8003a9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f903 	bl	8003a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2210      	movs	r2, #16
 800389c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f906 	bl	8003ab0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2208      	movs	r2, #8
 80038be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f8ff 	bl	8003ac4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d07b      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d072      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800393e:	2b00      	cmp	r3, #0
 8003940:	d03e      	beq.n	80039c0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003948:	2b60      	cmp	r3, #96	; 0x60
 800394a:	d02b      	beq.n	80039a4 <HAL_CAN_IRQHandler+0x32a>
 800394c:	2b60      	cmp	r3, #96	; 0x60
 800394e:	d82e      	bhi.n	80039ae <HAL_CAN_IRQHandler+0x334>
 8003950:	2b50      	cmp	r3, #80	; 0x50
 8003952:	d022      	beq.n	800399a <HAL_CAN_IRQHandler+0x320>
 8003954:	2b50      	cmp	r3, #80	; 0x50
 8003956:	d82a      	bhi.n	80039ae <HAL_CAN_IRQHandler+0x334>
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d019      	beq.n	8003990 <HAL_CAN_IRQHandler+0x316>
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d826      	bhi.n	80039ae <HAL_CAN_IRQHandler+0x334>
 8003960:	2b30      	cmp	r3, #48	; 0x30
 8003962:	d010      	beq.n	8003986 <HAL_CAN_IRQHandler+0x30c>
 8003964:	2b30      	cmp	r3, #48	; 0x30
 8003966:	d822      	bhi.n	80039ae <HAL_CAN_IRQHandler+0x334>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d002      	beq.n	8003972 <HAL_CAN_IRQHandler+0x2f8>
 800396c:	2b20      	cmp	r3, #32
 800396e:	d005      	beq.n	800397c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003970:	e01d      	b.n	80039ae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800397a:	e019      	b.n	80039b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f043 0310 	orr.w	r3, r3, #16
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003984:	e014      	b.n	80039b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800398e:	e00f      	b.n	80039b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003998:	e00a      	b.n	80039b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039a2:	e005      	b.n	80039b0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ac:	e000      	b.n	80039b0 <HAL_CAN_IRQHandler+0x336>
            break;
 80039ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2204      	movs	r2, #4
 80039c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f87c 	bl	8003ad8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039e0:	bf00      	nop
 80039e2:	3728      	adds	r7, #40	; 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <__NVIC_SetPriorityGrouping>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <__NVIC_SetPriorityGrouping+0x44>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b1e:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <__NVIC_SetPriorityGrouping+0x44>)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	60d3      	str	r3, [r2, #12]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_GetPriorityGrouping>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <__NVIC_GetPriorityGrouping+0x18>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	f003 0307 	and.w	r3, r3, #7
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <__NVIC_EnableIRQ>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	db0b      	blt.n	8003b7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	f003 021f 	and.w	r2, r3, #31
 8003b68:	4907      	ldr	r1, [pc, #28]	; (8003b88 <__NVIC_EnableIRQ+0x38>)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	2001      	movs	r0, #1
 8003b72:	fa00 f202 	lsl.w	r2, r0, r2
 8003b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	e000e100 	.word	0xe000e100

08003b8c <__NVIC_SetPriority>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	6039      	str	r1, [r7, #0]
 8003b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	db0a      	blt.n	8003bb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	490c      	ldr	r1, [pc, #48]	; (8003bd8 <__NVIC_SetPriority+0x4c>)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	440b      	add	r3, r1
 8003bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bb4:	e00a      	b.n	8003bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4908      	ldr	r1, [pc, #32]	; (8003bdc <__NVIC_SetPriority+0x50>)
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	3b04      	subs	r3, #4
 8003bc4:	0112      	lsls	r2, r2, #4
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	440b      	add	r3, r1
 8003bca:	761a      	strb	r2, [r3, #24]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000e100 	.word	0xe000e100
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <NVIC_EncodePriority>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f1c3 0307 	rsb	r3, r3, #7
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	bf28      	it	cs
 8003bfe:	2304      	movcs	r3, #4
 8003c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3304      	adds	r3, #4
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d902      	bls.n	8003c10 <NVIC_EncodePriority+0x30>
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3b03      	subs	r3, #3
 8003c0e:	e000      	b.n	8003c12 <NVIC_EncodePriority+0x32>
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	401a      	ands	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c28:	f04f 31ff 	mov.w	r1, #4294967295
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	43d9      	mvns	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c38:	4313      	orrs	r3, r2
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3724      	adds	r7, #36	; 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c58:	d301      	bcc.n	8003c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e00f      	b.n	8003c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <SysTick_Config+0x40>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c66:	210f      	movs	r1, #15
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	f7ff ff8e 	bl	8003b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <SysTick_Config+0x40>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <SysTick_Config+0x40>)
 8003c78:	2207      	movs	r2, #7
 8003c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	e000e010 	.word	0xe000e010

08003c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff29 	bl	8003aec <__NVIC_SetPriorityGrouping>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb4:	f7ff ff3e 	bl	8003b34 <__NVIC_GetPriorityGrouping>
 8003cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f7ff ff8e 	bl	8003be0 <NVIC_EncodePriority>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff5d 	bl	8003b8c <__NVIC_SetPriority>
}
 8003cd2:	bf00      	nop
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff31 	bl	8003b50 <__NVIC_EnableIRQ>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ffa2 	bl	8003c48 <SysTick_Config>
 8003d04:	4603      	mov	r3, r0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d22:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_FLASH_Program+0xa0>)
 8003d24:	7e1b      	ldrb	r3, [r3, #24]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_FLASH_Program+0x1e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e03b      	b.n	8003da6 <HAL_FLASH_Program+0x96>
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_FLASH_Program+0xa0>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d38:	f000 f870 	bl	8003e1c <FLASH_WaitForLastOperation>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12b      	bne.n	8003d9e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003d4c:	783b      	ldrb	r3, [r7, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	68b8      	ldr	r0, [r7, #8]
 8003d52:	f000 f91b 	bl	8003f8c <FLASH_Program_Byte>
 8003d56:	e016      	b.n	8003d86 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003d5e:	883b      	ldrh	r3, [r7, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	68b8      	ldr	r0, [r7, #8]
 8003d64:	f000 f8ee 	bl	8003f44 <FLASH_Program_HalfWord>
 8003d68:	e00d      	b.n	8003d86 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d105      	bne.n	8003d7c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4619      	mov	r1, r3
 8003d74:	68b8      	ldr	r0, [r7, #8]
 8003d76:	f000 f8c3 	bl	8003f00 <FLASH_Program_Word>
 8003d7a:	e004      	b.n	8003d86 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d80:	68b8      	ldr	r0, [r7, #8]
 8003d82:	f000 f88b 	bl	8003e9c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d86:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d8a:	f000 f847 	bl	8003e1c <FLASH_WaitForLastOperation>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_FLASH_Program+0xa4>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	4a07      	ldr	r2, [pc, #28]	; (8003db4 <HAL_FLASH_Program+0xa4>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_FLASH_Program+0xa0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	200005b8 	.word	0x200005b8
 8003db4:	40023c00 	.word	0x40023c00

08003db8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <HAL_FLASH_Unlock+0x38>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da0b      	bge.n	8003de2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_FLASH_Unlock+0x38>)
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_FLASH_Unlock+0x3c>)
 8003dce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <HAL_FLASH_Unlock+0x38>)
 8003dd2:	4a09      	ldr	r2, [pc, #36]	; (8003df8 <HAL_FLASH_Unlock+0x40>)
 8003dd4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_FLASH_Unlock+0x38>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	da01      	bge.n	8003de2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003de2:	79fb      	ldrb	r3, [r7, #7]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	40023c00 	.word	0x40023c00
 8003df4:	45670123 	.word	0x45670123
 8003df8:	cdef89ab 	.word	0xcdef89ab

08003dfc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_FLASH_Lock+0x1c>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_FLASH_Lock+0x1c>)
 8003e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e0a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40023c00 	.word	0x40023c00

08003e1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e28:	4b1a      	ldr	r3, [pc, #104]	; (8003e94 <FLASH_WaitForLastOperation+0x78>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003e2e:	f7fe faf1 	bl	8002414 <HAL_GetTick>
 8003e32:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003e34:	e010      	b.n	8003e58 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d00c      	beq.n	8003e58 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <FLASH_WaitForLastOperation+0x38>
 8003e44:	f7fe fae6 	bl	8002414 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d201      	bcs.n	8003e58 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e019      	b.n	8003e8c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <FLASH_WaitForLastOperation+0x7c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e8      	bne.n	8003e36 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <FLASH_WaitForLastOperation+0x7c>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <FLASH_WaitForLastOperation+0x7c>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <FLASH_WaitForLastOperation+0x7c>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003e82:	f000 f8a5 	bl	8003fd0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
  
}  
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200005b8 	.word	0x200005b8
 8003e98:	40023c00 	.word	0x40023c00

08003e9c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <FLASH_Program_DoubleWord+0x60>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a13      	ldr	r2, [pc, #76]	; (8003efc <FLASH_Program_DoubleWord+0x60>)
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <FLASH_Program_DoubleWord+0x60>)
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	4a10      	ldr	r2, [pc, #64]	; (8003efc <FLASH_Program_DoubleWord+0x60>)
 8003eba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003ebe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <FLASH_Program_DoubleWord+0x60>)
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <FLASH_Program_DoubleWord+0x60>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003ed2:	f3bf 8f6f 	isb	sy
}
 8003ed6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003ed8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	000a      	movs	r2, r1
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	3104      	adds	r1, #4
 8003eec:	4613      	mov	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <FLASH_Program_Word+0x40>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <FLASH_Program_Word+0x40>)
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <FLASH_Program_Word+0x40>)
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <FLASH_Program_Word+0x40>)
 8003f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <FLASH_Program_Word+0x40>)
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	4a06      	ldr	r2, [pc, #24]	; (8003f40 <FLASH_Program_Word+0x40>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	601a      	str	r2, [r3, #0]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40023c00 	.word	0x40023c00

08003f44 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <FLASH_Program_HalfWord+0x44>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <FLASH_Program_HalfWord+0x44>)
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <FLASH_Program_HalfWord+0x44>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <FLASH_Program_HalfWord+0x44>)
 8003f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <FLASH_Program_HalfWord+0x44>)
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <FLASH_Program_HalfWord+0x44>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	801a      	strh	r2, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40023c00 	.word	0x40023c00

08003f8c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <FLASH_Program_Byte+0x40>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <FLASH_Program_Byte+0x40>)
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003fa4:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <FLASH_Program_Byte+0x40>)
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <FLASH_Program_Byte+0x40>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <FLASH_Program_Byte+0x40>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	4a06      	ldr	r2, [pc, #24]	; (8003fcc <FLASH_Program_Byte+0x40>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	701a      	strb	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40023c00 	.word	0x40023c00

08003fd0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	f043 0310 	orr.w	r3, r3, #16
 8003fe8:	4a23      	ldr	r2, [pc, #140]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 8003fea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003fec:	4b21      	ldr	r3, [pc, #132]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 8003fee:	2210      	movs	r2, #16
 8003ff0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	4a1c      	ldr	r2, [pc, #112]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 8004008:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 800400c:	2220      	movs	r2, #32
 800400e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 8004026:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 800402a:	2240      	movs	r2, #64	; 0x40
 800402c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800403a:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	4a0d      	ldr	r2, [pc, #52]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 8004044:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 8004048:	2280      	movs	r2, #128	; 0x80
 800404a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f043 0320 	orr.w	r3, r3, #32
 8004060:	4a05      	ldr	r2, [pc, #20]	; (8004078 <FLASH_SetErrorCode+0xa8>)
 8004062:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004064:	4b03      	ldr	r3, [pc, #12]	; (8004074 <FLASH_SetErrorCode+0xa4>)
 8004066:	2202      	movs	r2, #2
 8004068:	60da      	str	r2, [r3, #12]
  }
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40023c00 	.word	0x40023c00
 8004078:	200005b8 	.word	0x200005b8

0800407c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_FLASHEx_Erase+0xd8>)
 8004090:	7e1b      	ldrb	r3, [r3, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_FLASHEx_Erase+0x1e>
 8004096:	2302      	movs	r3, #2
 8004098:	e058      	b.n	800414c <HAL_FLASHEx_Erase+0xd0>
 800409a:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_FLASHEx_Erase+0xd8>)
 800409c:	2201      	movs	r2, #1
 800409e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040a4:	f7ff feba 	bl	8003e1c <FLASH_WaitForLastOperation>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d148      	bne.n	8004144 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d115      	bne.n	80040ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f000 f844 	bl	800415c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80040d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80040d8:	f7ff fea0 	bl	8003e1c <FLASH_WaitForLastOperation>
 80040dc:	4603      	mov	r3, r0
 80040de:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <HAL_FLASHEx_Erase+0xdc>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <HAL_FLASHEx_Erase+0xdc>)
 80040e6:	f023 0304 	bic.w	r3, r3, #4
 80040ea:	6113      	str	r3, [r2, #16]
 80040ec:	e028      	b.n	8004140 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	e01c      	b.n	8004130 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	4619      	mov	r1, r3
 80040fe:	68b8      	ldr	r0, [r7, #8]
 8004100:	f000 f850 	bl	80041a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004104:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004108:	f7ff fe88 	bl	8003e1c <FLASH_WaitForLastOperation>
 800410c:	4603      	mov	r3, r0
 800410e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004110:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_FLASHEx_Erase+0xdc>)
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	4a10      	ldr	r2, [pc, #64]	; (8004158 <HAL_FLASHEx_Erase+0xdc>)
 8004116:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800411a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	601a      	str	r2, [r3, #0]
          break;
 8004128:	e00a      	b.n	8004140 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3301      	adds	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4413      	add	r3, r2
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	429a      	cmp	r2, r3
 800413e:	d3da      	bcc.n	80040f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004140:	f000 f878 	bl	8004234 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_FLASHEx_Erase+0xd8>)
 8004146:	2200      	movs	r2, #0
 8004148:	761a      	strb	r2, [r3, #24]

  return status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	200005b8 	.word	0x200005b8
 8004158:	40023c00 	.word	0x40023c00

0800415c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	6039      	str	r1, [r7, #0]
 8004166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <FLASH_MassErase+0x44>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	4a0c      	ldr	r2, [pc, #48]	; (80041a0 <FLASH_MassErase+0x44>)
 800416e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004172:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <FLASH_MassErase+0x44>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <FLASH_MassErase+0x44>)
 800417a:	f043 0304 	orr.w	r3, r3, #4
 800417e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <FLASH_MassErase+0x44>)
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	4313      	orrs	r3, r2
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <FLASH_MassErase+0x44>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6113      	str	r3, [r2, #16]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40023c00 	.word	0x40023c00

080041a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e010      	b.n	80041e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d103      	bne.n	80041ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80041c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e009      	b.n	80041e2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d103      	bne.n	80041dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80041d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e002      	b.n	80041e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80041dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80041ee:	4b10      	ldr	r3, [pc, #64]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	490f      	ldr	r1, [pc, #60]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	4a0c      	ldr	r2, [pc, #48]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 8004200:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004204:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4313      	orrs	r3, r2
 8004210:	4a07      	ldr	r2, [pc, #28]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <FLASH_Erase_Sector+0x8c>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004222:	6113      	str	r3, [r2, #16]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40023c00 	.word	0x40023c00

08004234 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <FLASH_FlushCaches+0x88>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004240:	2b00      	cmp	r3, #0
 8004242:	d017      	beq.n	8004274 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004244:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <FLASH_FlushCaches+0x88>)
 800424a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800424e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a19      	ldr	r2, [pc, #100]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004256:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	4b17      	ldr	r3, [pc, #92]	; (80042bc <FLASH_FlushCaches+0x88>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004266:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <FLASH_FlushCaches+0x88>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <FLASH_FlushCaches+0x88>)
 800426e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004272:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d017      	beq.n	80042b0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004280:	4b0e      	ldr	r3, [pc, #56]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800428a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <FLASH_FlushCaches+0x88>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <FLASH_FlushCaches+0x88>)
 8004292:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <FLASH_FlushCaches+0x88>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <FLASH_FlushCaches+0x88>)
 800429e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <FLASH_FlushCaches+0x88>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <FLASH_FlushCaches+0x88>)
 80042aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ae:	6013      	str	r3, [r2, #0]
  }
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40023c00 	.word	0x40023c00

080042c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	e16b      	b.n	80045b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042dc:	2201      	movs	r2, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	f040 815a 	bne.w	80045ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d005      	beq.n	8004312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430e:	2b02      	cmp	r3, #2
 8004310:	d130      	bne.n	8004374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2203      	movs	r2, #3
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004348:	2201      	movs	r2, #1
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 0201 	and.w	r2, r3, #1
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4313      	orrs	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	2b03      	cmp	r3, #3
 800437e:	d017      	beq.n	80043b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d123      	bne.n	8004404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	08da      	lsrs	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3208      	adds	r2, #8
 80043c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	220f      	movs	r2, #15
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	08da      	lsrs	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	2203      	movs	r2, #3
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0203 	and.w	r2, r3, #3
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4313      	orrs	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80b4 	beq.w	80045ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	4b60      	ldr	r3, [pc, #384]	; (80045cc <HAL_GPIO_Init+0x30c>)
 800444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444e:	4a5f      	ldr	r2, [pc, #380]	; (80045cc <HAL_GPIO_Init+0x30c>)
 8004450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004454:	6453      	str	r3, [r2, #68]	; 0x44
 8004456:	4b5d      	ldr	r3, [pc, #372]	; (80045cc <HAL_GPIO_Init+0x30c>)
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004462:	4a5b      	ldr	r2, [pc, #364]	; (80045d0 <HAL_GPIO_Init+0x310>)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	089b      	lsrs	r3, r3, #2
 8004468:	3302      	adds	r3, #2
 800446a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	220f      	movs	r2, #15
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a52      	ldr	r2, [pc, #328]	; (80045d4 <HAL_GPIO_Init+0x314>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <HAL_GPIO_Init+0x226>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a51      	ldr	r2, [pc, #324]	; (80045d8 <HAL_GPIO_Init+0x318>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_Init+0x222>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a50      	ldr	r2, [pc, #320]	; (80045dc <HAL_GPIO_Init+0x31c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_Init+0x21e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a4f      	ldr	r2, [pc, #316]	; (80045e0 <HAL_GPIO_Init+0x320>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_Init+0x21a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a4e      	ldr	r2, [pc, #312]	; (80045e4 <HAL_GPIO_Init+0x324>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_Init+0x216>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4d      	ldr	r2, [pc, #308]	; (80045e8 <HAL_GPIO_Init+0x328>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_Init+0x212>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_GPIO_Init+0x32c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x20e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4b      	ldr	r2, [pc, #300]	; (80045f0 <HAL_GPIO_Init+0x330>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_Init+0x20a>
 80044c6:	2307      	movs	r3, #7
 80044c8:	e00e      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044ca:	2308      	movs	r3, #8
 80044cc:	e00c      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044ce:	2306      	movs	r3, #6
 80044d0:	e00a      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044d2:	2305      	movs	r3, #5
 80044d4:	e008      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044d6:	2304      	movs	r3, #4
 80044d8:	e006      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044da:	2303      	movs	r3, #3
 80044dc:	e004      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044de:	2302      	movs	r3, #2
 80044e0:	e002      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_GPIO_Init+0x228>
 80044e6:	2300      	movs	r3, #0
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	f002 0203 	and.w	r2, r2, #3
 80044ee:	0092      	lsls	r2, r2, #2
 80044f0:	4093      	lsls	r3, r2
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f8:	4935      	ldr	r1, [pc, #212]	; (80045d0 <HAL_GPIO_Init+0x310>)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	3302      	adds	r3, #2
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004506:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800452a:	4a32      	ldr	r2, [pc, #200]	; (80045f4 <HAL_GPIO_Init+0x334>)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004530:	4b30      	ldr	r3, [pc, #192]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800455a:	4b26      	ldr	r3, [pc, #152]	; (80045f4 <HAL_GPIO_Init+0x334>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_GPIO_Init+0x334>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045a8:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <HAL_GPIO_Init+0x334>)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	f67f ae90 	bls.w	80042dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400
 80045dc:	40020800 	.word	0x40020800
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40021400 	.word	0x40021400
 80045ec:	40021800 	.word	0x40021800
 80045f0:	40021c00 	.word	0x40021c00
 80045f4:	40013c00 	.word	0x40013c00

080045f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
 8004604:	4613      	mov	r3, r2
 8004606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004608:	787b      	ldrb	r3, [r7, #1]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004614:	e003      	b.n	800461e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004616:	887b      	ldrh	r3, [r7, #2]
 8004618:	041a      	lsls	r2, r3, #16
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	619a      	str	r2, [r3, #24]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <LL_ADC_REG_SetSequencerLength>:
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <LL_ADC_IsEnabled>:
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8004686:	481c      	ldr	r0, [pc, #112]	; (80046f8 <LL_ADC_CommonInit+0x80>)
 8004688:	f7ff ffe2 	bl	8004650 <LL_ADC_IsEnabled>
 800468c:	4604      	mov	r4, r0
 800468e:	481b      	ldr	r0, [pc, #108]	; (80046fc <LL_ADC_CommonInit+0x84>)
 8004690:	f7ff ffde 	bl	8004650 <LL_ADC_IsEnabled>
 8004694:	4603      	mov	r3, r0
 8004696:	431c      	orrs	r4, r3
 8004698:	4819      	ldr	r0, [pc, #100]	; (8004700 <LL_ADC_CommonInit+0x88>)
 800469a:	f7ff ffd9 	bl	8004650 <LL_ADC_IsEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	4323      	orrs	r3, r4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d120      	bne.n	80046e8 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d012      	beq.n	80046d4 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <LL_ADC_CommonInit+0x8c>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	6811      	ldr	r1, [r2, #0]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	6852      	ldr	r2, [r2, #4]
 80046be:	4311      	orrs	r1, r2
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	6892      	ldr	r2, [r2, #8]
 80046c4:	4311      	orrs	r1, r2
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	e00b      	b.n	80046ec <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <LL_ADC_CommonInit+0x8c>)
 80046da:	4013      	ands	r3, r2
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	e001      	b.n	80046ec <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd90      	pop	{r4, r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40012000 	.word	0x40012000
 80046fc:	40012100 	.word	0x40012100
 8004700:	40012200 	.word	0x40012200
 8004704:	fffc10e0 	.word	0xfffc10e0

08004708 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ff9a 	bl	8004650 <LL_ADC_IsEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d117      	bne.n	8004752 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800472a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	6811      	ldr	r1, [r2, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	430a      	orrs	r2, r1
 8004738:	431a      	orrs	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	e001      	b.n	8004756 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff6e 	bl	8004650 <LL_ADC_IsEnabled>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d12b      	bne.n	80047d2 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	e005      	b.n	80047a2 <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <LL_ADC_REG_Init+0x80>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	68d2      	ldr	r2, [r2, #12]
 80047b6:	4311      	orrs	r1, r2
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	6912      	ldr	r2, [r2, #16]
 80047bc:	430a      	orrs	r2, r1
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ff2d 	bl	800462a <LL_ADC_REG_SetSequencerLength>
 80047d0:	e001      	b.n	80047d6 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	c0fffcfd 	.word	0xc0fffcfd

080047e4 <LL_EXTI_EnableIT_0_31>:
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <LL_EXTI_EnableIT_0_31+0x20>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4904      	ldr	r1, [pc, #16]	; (8004804 <LL_EXTI_EnableIT_0_31+0x20>)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40013c00 	.word	0x40013c00

08004808 <LL_EXTI_DisableIT_0_31>:
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <LL_EXTI_DisableIT_0_31+0x24>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	43db      	mvns	r3, r3
 8004818:	4904      	ldr	r1, [pc, #16]	; (800482c <LL_EXTI_DisableIT_0_31+0x24>)
 800481a:	4013      	ands	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40013c00 	.word	0x40013c00

08004830 <LL_EXTI_EnableEvent_0_31>:
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <LL_EXTI_EnableEvent_0_31+0x20>)
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	4904      	ldr	r1, [pc, #16]	; (8004850 <LL_EXTI_EnableEvent_0_31+0x20>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40013c00 	.word	0x40013c00

08004854 <LL_EXTI_DisableEvent_0_31>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <LL_EXTI_DisableEvent_0_31+0x24>)
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	43db      	mvns	r3, r3
 8004864:	4904      	ldr	r1, [pc, #16]	; (8004878 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004866:	4013      	ands	r3, r2
 8004868:	604b      	str	r3, [r1, #4]
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40013c00 	.word	0x40013c00

0800487c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	4904      	ldr	r1, [pc, #16]	; (800489c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40013c00 	.word	0x40013c00

080048a0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80048a8:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	43db      	mvns	r3, r3
 80048b0:	4904      	ldr	r1, [pc, #16]	; (80048c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40013c00 	.word	0x40013c00

080048c8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60cb      	str	r3, [r1, #12]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	40013c00 	.word	0x40013c00

080048ec <LL_EXTI_DisableFallingTrig_0_31>:
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	4904      	ldr	r1, [pc, #16]	; (8004910 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80048fe:	4013      	ands	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40013c00 	.word	0x40013c00

08004914 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	791b      	ldrb	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d065      	beq.n	80049f4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d06c      	beq.n	8004a0a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	795b      	ldrb	r3, [r3, #5]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d01c      	beq.n	8004972 <LL_EXTI_Init+0x5e>
 8004938:	2b02      	cmp	r3, #2
 800493a:	dc25      	bgt.n	8004988 <LL_EXTI_Init+0x74>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <LL_EXTI_Init+0x32>
 8004940:	2b01      	cmp	r3, #1
 8004942:	d00b      	beq.n	800495c <LL_EXTI_Init+0x48>
 8004944:	e020      	b.n	8004988 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ff82 	bl	8004854 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff45 	bl	80047e4 <LL_EXTI_EnableIT_0_31>
          break;
 800495a:	e018      	b.n	800498e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff51 	bl	8004808 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ff60 	bl	8004830 <LL_EXTI_EnableEvent_0_31>
          break;
 8004970:	e00d      	b.n	800498e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff ff34 	bl	80047e4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ff55 	bl	8004830 <LL_EXTI_EnableEvent_0_31>
          break;
 8004986:	e002      	b.n	800498e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
          break;
 800498c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	799b      	ldrb	r3, [r3, #6]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d039      	beq.n	8004a0a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	799b      	ldrb	r3, [r3, #6]
 800499a:	2b03      	cmp	r3, #3
 800499c:	d01c      	beq.n	80049d8 <LL_EXTI_Init+0xc4>
 800499e:	2b03      	cmp	r3, #3
 80049a0:	dc25      	bgt.n	80049ee <LL_EXTI_Init+0xda>
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d002      	beq.n	80049ac <LL_EXTI_Init+0x98>
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d00b      	beq.n	80049c2 <LL_EXTI_Init+0xae>
 80049aa:	e020      	b.n	80049ee <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff ff9b 	bl	80048ec <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff5e 	bl	800487c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80049c0:	e024      	b.n	8004a0c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff ff6a 	bl	80048a0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff79 	bl	80048c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80049d6:	e019      	b.n	8004a0c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff ff4d 	bl	800487c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff ff6e 	bl	80048c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80049ec:	e00e      	b.n	8004a0c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
            break;
 80049f2:	e00b      	b.n	8004a0c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff05 	bl	8004808 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ff26 	bl	8004854 <LL_EXTI_DisableEvent_0_31>
 8004a08:	e000      	b.n	8004a0c <LL_EXTI_Init+0xf8>
      }
 8004a0a:	bf00      	nop
  }
  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <LL_GPIO_SetPinMode>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	b089      	sub	sp, #36	; 0x24
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	613b      	str	r3, [r7, #16]
  return result;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	fab3 f383 	clz	r3, r3
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	2103      	movs	r1, #3
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	401a      	ands	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	61bb      	str	r3, [r7, #24]
  return result;
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	fab3 f383 	clz	r3, r3
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	431a      	orrs	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3724      	adds	r7, #36	; 0x24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_GPIO_SetPinOutputType>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	401a      	ands	r2, r3
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	605a      	str	r2, [r3, #4]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_GPIO_SetPinSpeed>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa93 f3a3 	rbit	r3, r3
 8004abe:	613b      	str	r3, [r7, #16]
  return result;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	fab3 f383 	clz	r3, r3
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2103      	movs	r1, #3
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	fa93 f3a3 	rbit	r3, r3
 8004ade:	61bb      	str	r3, [r7, #24]
  return result;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	609a      	str	r2, [r3, #8]
}
 8004af6:	bf00      	nop
 8004af8:	3724      	adds	r7, #36	; 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_GPIO_SetPinPull>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	b089      	sub	sp, #36	; 0x24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	fa93 f3a3 	rbit	r3, r3
 8004b1c:	613b      	str	r3, [r7, #16]
  return result;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	2103      	movs	r1, #3
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	401a      	ands	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	fa93 f3a3 	rbit	r3, r3
 8004b3c:	61bb      	str	r3, [r7, #24]
  return result;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	60da      	str	r2, [r3, #12]
}
 8004b54:	bf00      	nop
 8004b56:	3724      	adds	r7, #36	; 0x24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_GPIO_SetAFPin_0_7>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	; 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	613b      	str	r3, [r7, #16]
  return result;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	210f      	movs	r1, #15
 8004b88:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	fa93 f3a3 	rbit	r3, r3
 8004b9a:	61bb      	str	r3, [r7, #24]
  return result;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	621a      	str	r2, [r3, #32]
}
 8004bb2:	bf00      	nop
 8004bb4:	3724      	adds	r7, #36	; 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_GPIO_SetAFPin_8_15>:
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b089      	sub	sp, #36	; 0x24
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	613b      	str	r3, [r7, #16]
  return result;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	210f      	movs	r1, #15
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	401a      	ands	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	61bb      	str	r3, [r7, #24]
  return result;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004c14:	bf00      	nop
 8004c16:	3724      	adds	r7, #36	; 0x24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa93 f3a3 	rbit	r3, r3
 8004c3e:	613b      	str	r3, [r7, #16]
  return result;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004c4a:	e050      	b.n	8004cee <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	2101      	movs	r1, #1
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	fa01 f303 	lsl.w	r3, r1, r3
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d042      	beq.n	8004ce8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d003      	beq.n	8004c72 <LL_GPIO_Init+0x52>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d10d      	bne.n	8004c8e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	461a      	mov	r2, r3
 8004c78:	69b9      	ldr	r1, [r7, #24]
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff12 	bl	8004aa4 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	461a      	mov	r2, r3
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fef3 	bl	8004a74 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	461a      	mov	r2, r3
 8004c94:	69b9      	ldr	r1, [r7, #24]
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff ff33 	bl	8004b02 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d11a      	bne.n	8004cda <LL_GPIO_Init+0xba>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	60bb      	str	r3, [r7, #8]
  return result;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	d807      	bhi.n	8004ccc <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	69b9      	ldr	r1, [r7, #24]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff4b 	bl	8004b60 <LL_GPIO_SetAFPin_0_7>
 8004cca:	e006      	b.n	8004cda <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff72 	bl	8004bbe <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	69b9      	ldr	r1, [r7, #24]
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fe97 	bl	8004a16 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	3301      	adds	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1a7      	bne.n	8004c4c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <LL_RCC_GetSysClkSource>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <LL_RCC_GetSysClkSource+0x18>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 030c 	and.w	r3, r3, #12
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <LL_RCC_GetAHBPrescaler>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <LL_RCC_GetAHBPrescaler+0x18>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800

08004d40 <LL_RCC_GetAPB1Prescaler>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800

08004d5c <LL_RCC_GetAPB2Prescaler>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800

08004d78 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <LL_RCC_PLL_GetMainSource+0x18>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800

08004d94 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <LL_RCC_PLL_GetN+0x18>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40023800 	.word	0x40023800

08004db0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004db4:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <LL_RCC_PLL_GetP+0x18>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800

08004dcc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <LL_RCC_PLL_GetDivider+0x18>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004df0:	f000 f820 	bl	8004e34 <RCC_GetSystemClockFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f840 	bl	8004e84 <RCC_GetHCLKClockFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f84e 	bl	8004eb0 <RCC_GetPCLK1ClockFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f85a 	bl	8004ed8 <RCC_GetPCLK2ClockFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004e3e:	f7ff ff63 	bl	8004d08 <LL_RCC_GetSysClkSource>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d00c      	beq.n	8004e62 <RCC_GetSystemClockFreq+0x2e>
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d80f      	bhi.n	8004e6c <RCC_GetSystemClockFreq+0x38>
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <RCC_GetSystemClockFreq+0x22>
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d003      	beq.n	8004e5c <RCC_GetSystemClockFreq+0x28>
 8004e54:	e00a      	b.n	8004e6c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <RCC_GetSystemClockFreq+0x48>)
 8004e58:	607b      	str	r3, [r7, #4]
      break;
 8004e5a:	e00a      	b.n	8004e72 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004e5c:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <RCC_GetSystemClockFreq+0x4c>)
 8004e5e:	607b      	str	r3, [r7, #4]
      break;
 8004e60:	e007      	b.n	8004e72 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004e62:	2008      	movs	r0, #8
 8004e64:	f000 f84c 	bl	8004f00 <RCC_PLL_GetFreqDomain_SYS>
 8004e68:	6078      	str	r0, [r7, #4]
      break;
 8004e6a:	e002      	b.n	8004e72 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <RCC_GetSystemClockFreq+0x48>)
 8004e6e:	607b      	str	r3, [r7, #4]
      break;
 8004e70:	bf00      	nop
  }

  return frequency;
 8004e72:	687b      	ldr	r3, [r7, #4]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	00f42400 	.word	0x00f42400
 8004e80:	01312d00 	.word	0x01312d00

08004e84 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004e8c:	f7ff ff4a 	bl	8004d24 <LL_RCC_GetAHBPrescaler>
 8004e90:	4603      	mov	r3, r0
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	4a04      	ldr	r2, [pc, #16]	; (8004eac <RCC_GetHCLKClockFreq+0x28>)
 8004e9a:	5cd3      	ldrb	r3, [r2, r3]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	40d3      	lsrs	r3, r2
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	0800575c 	.word	0x0800575c

08004eb0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004eb8:	f7ff ff42 	bl	8004d40 <LL_RCC_GetAPB1Prescaler>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	0a9b      	lsrs	r3, r3, #10
 8004ec0:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <RCC_GetPCLK1ClockFreq+0x24>)
 8004ec2:	5cd3      	ldrb	r3, [r2, r3]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	40d3      	lsrs	r3, r2
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	0800576c 	.word	0x0800576c

08004ed8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004ee0:	f7ff ff3c 	bl	8004d5c <LL_RCC_GetAPB2Prescaler>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	0b5b      	lsrs	r3, r3, #13
 8004ee8:	4a04      	ldr	r2, [pc, #16]	; (8004efc <RCC_GetPCLK2ClockFreq+0x24>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	461a      	mov	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	40d3      	lsrs	r3, r2
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	0800576c 	.word	0x0800576c

08004f00 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004f00:	b590      	push	{r4, r7, lr}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004f14:	f7ff ff30 	bl	8004d78 <LL_RCC_PLL_GetMainSource>
 8004f18:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f26:	d003      	beq.n	8004f30 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004f28:	e005      	b.n	8004f36 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004f2c:	617b      	str	r3, [r7, #20]
      break;
 8004f2e:	e005      	b.n	8004f3c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004f30:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004f32:	617b      	str	r3, [r7, #20]
      break;
 8004f34:	e002      	b.n	8004f3c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004f38:	617b      	str	r3, [r7, #20]
      break;
 8004f3a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d113      	bne.n	8004f6a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004f42:	f7ff ff43 	bl	8004dcc <LL_RCC_PLL_GetDivider>
 8004f46:	4602      	mov	r2, r0
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	fbb3 f4f2 	udiv	r4, r3, r2
 8004f4e:	f7ff ff21 	bl	8004d94 <LL_RCC_PLL_GetN>
 8004f52:	4603      	mov	r3, r0
 8004f54:	fb03 f404 	mul.w	r4, r3, r4
 8004f58:	f7ff ff2a 	bl	8004db0 <LL_RCC_PLL_GetP>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	3301      	adds	r3, #1
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f68:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004f6a:	693b      	ldr	r3, [r7, #16]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd90      	pop	{r4, r7, pc}
 8004f74:	00f42400 	.word	0x00f42400
 8004f78:	01312d00 	.word	0x01312d00

08004f7c <LL_TIM_SetPrescaler>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_TIM_SetAutoReload>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_TIM_SetRepetitionCounter>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <LL_TIM_OC_SetCompareCH1>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <LL_TIM_OC_SetCompareCH2>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_TIM_OC_SetCompareCH3>:
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <LL_TIM_OC_SetCompareCH4>:
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f043 0201 	orr.w	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	615a      	str	r2, [r3, #20]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3d      	ldr	r2, [pc, #244]	; (8005168 <LL_TIM_Init+0x108>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <LL_TIM_Init+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507e:	d00f      	beq.n	80050a0 <LL_TIM_Init+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3a      	ldr	r2, [pc, #232]	; (800516c <LL_TIM_Init+0x10c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <LL_TIM_Init+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a39      	ldr	r2, [pc, #228]	; (8005170 <LL_TIM_Init+0x110>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <LL_TIM_Init+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a38      	ldr	r2, [pc, #224]	; (8005174 <LL_TIM_Init+0x114>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <LL_TIM_Init+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a37      	ldr	r2, [pc, #220]	; (8005178 <LL_TIM_Init+0x118>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d106      	bne.n	80050ae <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a2d      	ldr	r2, [pc, #180]	; (8005168 <LL_TIM_Init+0x108>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d02b      	beq.n	800510e <LL_TIM_Init+0xae>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050bc:	d027      	beq.n	800510e <LL_TIM_Init+0xae>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	; (800516c <LL_TIM_Init+0x10c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d023      	beq.n	800510e <LL_TIM_Init+0xae>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a29      	ldr	r2, [pc, #164]	; (8005170 <LL_TIM_Init+0x110>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d01f      	beq.n	800510e <LL_TIM_Init+0xae>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a28      	ldr	r2, [pc, #160]	; (8005174 <LL_TIM_Init+0x114>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01b      	beq.n	800510e <LL_TIM_Init+0xae>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a27      	ldr	r2, [pc, #156]	; (8005178 <LL_TIM_Init+0x118>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d017      	beq.n	800510e <LL_TIM_Init+0xae>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a26      	ldr	r2, [pc, #152]	; (800517c <LL_TIM_Init+0x11c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d013      	beq.n	800510e <LL_TIM_Init+0xae>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a25      	ldr	r2, [pc, #148]	; (8005180 <LL_TIM_Init+0x120>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00f      	beq.n	800510e <LL_TIM_Init+0xae>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a24      	ldr	r2, [pc, #144]	; (8005184 <LL_TIM_Init+0x124>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <LL_TIM_Init+0xae>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a23      	ldr	r2, [pc, #140]	; (8005188 <LL_TIM_Init+0x128>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <LL_TIM_Init+0xae>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <LL_TIM_Init+0x12c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <LL_TIM_Init+0xae>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a21      	ldr	r2, [pc, #132]	; (8005190 <LL_TIM_Init+0x130>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d106      	bne.n	800511c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff ff35 	bl	8004f98 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ff21 	bl	8004f7c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <LL_TIM_Init+0x108>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <LL_TIM_Init+0xea>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <LL_TIM_Init+0x118>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d105      	bne.n	8005156 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff2f 	bl	8004fb4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ff72 	bl	8005040 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800
 8005188:	40001800 	.word	0x40001800
 800518c:	40001c00 	.word	0x40001c00
 8005190:	40002000 	.word	0x40002000

08005194 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	d027      	beq.n	80051fc <LL_TIM_OC_Init+0x68>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b2:	d82a      	bhi.n	800520a <LL_TIM_OC_Init+0x76>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ba:	d018      	beq.n	80051ee <LL_TIM_OC_Init+0x5a>
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	d822      	bhi.n	800520a <LL_TIM_OC_Init+0x76>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d003      	beq.n	80051d2 <LL_TIM_OC_Init+0x3e>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d007      	beq.n	80051e0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80051d0:	e01b      	b.n	800520a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f81f 	bl	8005218 <OC1Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	75fb      	strb	r3, [r7, #23]
      break;
 80051de:	e015      	b.n	800520c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f884 	bl	80052f0 <OC2Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75fb      	strb	r3, [r7, #23]
      break;
 80051ec:	e00e      	b.n	800520c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f8ed 	bl	80053d0 <OC3Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	75fb      	strb	r3, [r7, #23]
      break;
 80051fa:	e007      	b.n	800520c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f956 	bl	80054b0 <OC4Config>
 8005204:	4603      	mov	r3, r0
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	e000      	b.n	800520c <LL_TIM_OC_Init+0x78>
      break;
 800520a:	bf00      	nop
  }

  return result;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0303 	bic.w	r3, r3, #3
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 0202 	bic.w	r2, r3, #2
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <OC1Config+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <OC1Config+0x6a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <OC1Config+0xd4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d11e      	bne.n	80052c0 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 0208 	bic.w	r2, r3, #8
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 0204 	bic.w	r2, r3, #4
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fe7c 	bl	8004fd0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40010400 	.word	0x40010400

080052f0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 0210 	bic.w	r2, r3, #16
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0220 	bic.w	r2, r3, #32
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0210 	bic.w	r2, r3, #16
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <OC2Config+0xd8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <OC2Config+0x70>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <OC2Config+0xdc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d11f      	bne.n	80053a0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	019b      	lsls	r3, r3, #6
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	019b      	lsls	r3, r3, #6
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fe1a 	bl	8004fec <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0303 	bic.w	r3, r3, #3
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a1d      	ldr	r2, [pc, #116]	; (80054a8 <OC3Config+0xd8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d003      	beq.n	800543e <OC3Config+0x6e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <OC3Config+0xdc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d11f      	bne.n	800547e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	029b      	lsls	r3, r3, #10
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	029b      	lsls	r3, r3, #10
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	015b      	lsls	r3, r3, #5
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fdb9 	bl	8005008 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400

080054b0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	031b      	lsls	r3, r3, #12
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	031b      	lsls	r3, r3, #12
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a11      	ldr	r2, [pc, #68]	; (8005558 <OC4Config+0xa8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <OC4Config+0x70>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a10      	ldr	r2, [pc, #64]	; (800555c <OC4Config+0xac>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d107      	bne.n	8005530 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	019b      	lsls	r3, r3, #6
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fd6e 	bl	8005024 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400

08005560 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <LL_SetSystemCoreClock+0x1c>)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6013      	str	r3, [r2, #0]
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000004 	.word	0x20000004

08005580 <__libc_init_array>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	4d0d      	ldr	r5, [pc, #52]	; (80055b8 <__libc_init_array+0x38>)
 8005584:	4c0d      	ldr	r4, [pc, #52]	; (80055bc <__libc_init_array+0x3c>)
 8005586:	1b64      	subs	r4, r4, r5
 8005588:	10a4      	asrs	r4, r4, #2
 800558a:	2600      	movs	r6, #0
 800558c:	42a6      	cmp	r6, r4
 800558e:	d109      	bne.n	80055a4 <__libc_init_array+0x24>
 8005590:	4d0b      	ldr	r5, [pc, #44]	; (80055c0 <__libc_init_array+0x40>)
 8005592:	4c0c      	ldr	r4, [pc, #48]	; (80055c4 <__libc_init_array+0x44>)
 8005594:	f000 f820 	bl	80055d8 <_init>
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	2600      	movs	r6, #0
 800559e:	42a6      	cmp	r6, r4
 80055a0:	d105      	bne.n	80055ae <__libc_init_array+0x2e>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a8:	4798      	blx	r3
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7ee      	b.n	800558c <__libc_init_array+0xc>
 80055ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b2:	4798      	blx	r3
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7f2      	b.n	800559e <__libc_init_array+0x1e>
 80055b8:	0800577c 	.word	0x0800577c
 80055bc:	0800577c 	.word	0x0800577c
 80055c0:	0800577c 	.word	0x0800577c
 80055c4:	08005780 	.word	0x08005780

080055c8 <memset>:
 80055c8:	4402      	add	r2, r0
 80055ca:	4603      	mov	r3, r0
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d100      	bne.n	80055d2 <memset+0xa>
 80055d0:	4770      	bx	lr
 80055d2:	f803 1b01 	strb.w	r1, [r3], #1
 80055d6:	e7f9      	b.n	80055cc <memset+0x4>

080055d8 <_init>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr

080055e4 <_fini>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr
